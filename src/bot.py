import logging
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton, LabeledPrice
from telegram.ext import (
    Application, CommandHandler, CallbackQueryHandler,
    ContextTypes, PreCheckoutQueryHandler, MessageHandler, filters
)
from .config import BOT_TOKEN

logging.basicConfig(
    format="%(asctime)s [%(levelname)s] %(name)s: %(message)s",
    level=logging.INFO,
)
log = logging.getLogger("astro-num-bot")

# --- –¶–µ–Ω—ã –≤ Stars (XTR). –≠–∫–≤–∏–≤–∞–ª–µ–Ω—Ç—ã –≤ —Ç–µ–∫—Å—Ç–µ –æ–ø–∏—Å–∞–Ω–∏—è. ---
PRICE_NUM   = 90   # ~200 ‚ÇΩ
PRICE_PALM  = 130   # ~300 ‚ÇΩ
PRICE_NATAL = 220   # ~500 ‚ÇΩ

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –±–µ–∑ —Å–ª–æ–≤–∞ "–æ–ø–ª–∞—Ç–∏—Ç—å"
MENU = [
    [InlineKeyboardButton("üî¢ –ù—É–º–µ—Ä–æ–ª–æ–≥–∏—è", callback_data="num")],
    [InlineKeyboardButton("ü™¨ –•–∏—Ä–æ–º–∞–Ω—Ç–∏—è", callback_data="palm")],
    [InlineKeyboardButton("üåå –ù–∞—Ç–∞–ª–∫–∞ PRO", callback_data="natal")],
]

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "‚ú® –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ AstroAi ‚ú®\n\n–Ø ‚Äî —Ç–≤–æ–π –ª–∏—á–Ω—ã–π –ø—Ä–æ–≤–æ–¥–Ω–∏–∫ –≤ –º–∏—Ä –∑–≤—ë–∑–¥, —á–∏—Å–µ–ª –∏ –ª–∏–Ω–∏–π —Å—É–¥—å–±—ã.\n\n–ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å:\nüî¢ –ü–æ–ª—É—á–∏—Ç—å –Ω—É–º–µ—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π —Ä–∞–∑–±–æ—Ä –ø–æ –¥–∞—Ç–µ —Ä–æ–∂–¥–µ–Ω–∏—è\nü™¨ –ó–∞–≥–ª—è–Ω—É—Ç—å –≤ —Ç–∞–π–Ω—ã —Å–≤–æ–µ–π –ª–∞–¥–æ–Ω–∏ —á–µ—Ä–µ–∑ —Ö–∏—Ä–æ–º–∞–Ω—Ç–∏—é\nüåå –£–∑–Ω–∞—Ç—å –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫—É—é –Ω–∞—Ç–∞–ª—å–Ω—É—é –∫–∞—Ä—Ç—É —Å –¥–æ–º–∞–º–∏ –∏ –∞—Å–ø–µ–∫—Ç–∞–º–∏\n\n–í—ã–±–µ—Ä–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –æ—Ç–∫–ª–∏–∫–∞–µ—Ç—Å—è —Ç–µ–±–µ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å:",
        reply_markup=InlineKeyboardMarkup(MENU),
    )

# –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –∏–Ω–≤–æ–π—Å–∞ –≤ Stars
async def send_stars_invoice(
    update_or_query, context: ContextTypes.DEFAULT_TYPE,
    title: str, desc: str, payload: str, amount_stars: int
):
    chat_id = (
        update_or_query.effective_chat.id
        if isinstance(update_or_query, Update)
        else update_or_query.message.chat.id
        if hasattr(update_or_query, "message")
        else update_or_query.from_user.id
    )
    prices = [LabeledPrice(label=title, amount=amount_stars)]  # –¥–ª—è XTR amount = –∫–æ–ª-–≤–æ –∑–≤—ë–∑–¥
    await context.bot.send_invoice(
        chat_id=chat_id,
        title=title,
        description=desc,
        payload=payload,           # –≤–µ—Ä–Ω—ë—Ç—Å—è –≤ successful_payment
        provider_token="",         # –¥–ª—è Telegram Stars –æ—Å—Ç–∞–≤–ª—è–µ–º –ø—É—Å—Ç—ã–º
        currency="XTR",            # –∫–ª—é—á–µ–≤–æ–π –º–æ–º–µ–Ω—Ç!
        prices=prices,
        start_parameter="buy",
        need_name=False,
        need_phone_number=False,
        need_email=False,
        need_shipping_address=False,
        is_flexible=False,
    )

async def on_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    await q.answer()
    if q.data == "num":
        await q.edit_message_text(
            "üî¢ *–ù—É–º–µ—Ä–æ–ª–æ–≥–∏—è*\n\n–ß–∏—Å–ª–∞ –Ω–µ—Å—É—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–æ–¥ —Ç–≤–æ–µ–π –ª–∏—á–Ω–æ—Å—Ç–∏. –†–∞–∑–±–æ—Ä –ø–æ–∫–∞–∂–µ—Ç —Å–∏–ª—å–Ω—ã–µ –∏ —Å–ª–∞–±—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã, –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –∏ –∫–∞—Ä–º–∏—á–µ—Å–∫–∏–µ —É—Ä–æ–∫–∏.\n\n–°—Ç–æ–∏–º–æ—Å—Ç—å: 90 ‚≠ê (‚âà200 ‚ÇΩ)",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("–û–ø–ª–∞—Ç–∏—Ç—å 90 ‚≠ê", callback_data="buy_num")]
            ]),
            parse_mode="Markdown"
        )
    elif q.data == "palm":
        await q.edit_message_text(
            "ü™¨ *–•–∏—Ä–æ–º–∞–Ω—Ç–∏—è*\n\n–õ–∏–Ω–∏–∏ –Ω–∞ –ª–∞–¥–æ–Ω–∏ ‚Äî —ç—Ç–æ —Ç–≤–æ–π –∂–∏–≤–æ–π –¥–Ω–µ–≤–Ω–∏–∫ —Å—É–¥—å–±—ã. –†–∞–∑–±–æ—Ä –ø–æ —Ñ–æ—Ç–æ –ø–æ–∫–∞–∂–µ—Ç —Ç–∞–ª–∞–Ω—Ç—ã, –≤—ã–∑–æ–≤—ã –∏ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª.\n\n–°—Ç–æ–∏–º–æ—Å—Ç—å: 130 ‚≠ê (‚âà300 ‚ÇΩ)",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("–û–ø–ª–∞—Ç–∏—Ç—å 130 ‚≠ê", callback_data="buy_palm")]
            ]),
            parse_mode="Markdown"
        )
    elif q.data == "natal":
        await q.edit_message_text(
            "üåå *–ù–∞—Ç–∞–ª–∫–∞ PRO*\n\n–ü–æ–ª–Ω—ã–π –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π —Ä–∞–∑–±–æ—Ä: –ø–ª–∞–Ω–µ—Ç—ã, –¥–æ–º–∞ –∏ –∞—Å–ø–µ–∫—Ç—ã, —É—Å–∏–ª–µ–Ω–Ω—ã–π –Ω—É–º–µ—Ä–æ–ª–æ–≥–∏–µ–π. –≠—Ç–æ –∫–∞–∫ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è –∫–∞—Ä—Ç–∞ –í—Å–µ–ª–µ–Ω–Ω–æ–π –¥–ª—è —Ç–≤–æ–µ–π –∂–∏–∑–Ω–∏.\n\n–°—Ç–æ–∏–º–æ—Å—Ç—å: 220 ‚≠ê (‚âà500 ‚ÇΩ)",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("–û–ø–ª–∞—Ç–∏—Ç—å 220 ‚≠ê", callback_data="buy_natal")]
            ]),
            parse_mode="Markdown"
        )
    elif q.data == "buy_num":
        await send_stars_invoice(
            q, context,
            "–ù—É–º–µ—Ä–æ–ª–æ–≥–∏—è",
            "–ö—Ä–∞—Ç–∫–∏–π –Ω—É–º–µ—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π —Ä–∞–∑–±–æ—Ä (‚âà 200 ‚ÇΩ).",
            "NUM_200", PRICE_NUM
        )
    elif q.data == "buy_palm":
        await send_stars_invoice(
            q, context,
            "–•–∏—Ä–æ–º–∞–Ω—Ç–∏—è",
            "–†–∞–∑–±–æ—Ä –ø–æ —Ñ–æ—Ç–æ –ª–∞–¥–æ–Ω–∏ (‚âà 300 ‚ÇΩ).",
            "PALM_300", PRICE_PALM
        )
    elif q.data == "buy_natal":
        await send_stars_invoice(
            q, context,
            "–ù–∞—Ç–∞–ª–∫–∞ PRO",
            "–ù–∞—Ç–∞–ª—å–Ω–∞—è –∫–∞—Ä—Ç–∞ + –¥–æ–º–∞ + –∞—Å–ø–µ–∫—Ç—ã + –Ω—É–º–µ—Ä–æ–ª–æ–≥–∏—è (‚âà 500 ‚ÇΩ).",
            "NATAL_500", PRICE_NATAL
        )
    else:
        await q.edit_message_text("–í—ã–±–∏—Ä–∞–π —É—Å–ª—É–≥—É ‚§¥Ô∏è")

# –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π pre-checkout (–∑–¥–µ—Å—å –º–æ–∂–Ω–æ –≤—Å—Ç–∞–≤–∏—Ç—å –≤–∞–ª–∏–¥–∞—Ü–∏–∏)
async def precheckout_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.pre_checkout_query.answer(ok=True)

# –£—Å–ø–µ—à–Ω–∞—è –æ–ø–ª–∞—Ç–∞
async def successful_payment_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    sp = update.message.successful_payment
    payload = sp.invoice_payload  # –Ω–∞–ø—Ä–∏–º–µ—Ä "NATAL_500"
    # TODO: –∑–¥–µ—Å—å –∑–∞–ø–∏—à–µ–º –∑–∞–∫–∞–∑ –≤ –ë–î (tg_id, payload, —Å—É–º–º–∞, charge_id)
    charge_id = sp.telegram_payment_charge_id
    log.info(f"Payment ok: payload={payload}, charge_id={charge_id}, amount={sp.total_amount} XTR")

    mapping = {
        "NUM_200":   "–û–ø–ª–∞—Ç–∞ –ø–æ–ª—É—á–µ–Ω–∞ ‚úÖ –ü—Ä–∏—à–ª–∏ –§–ò–û –∏ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ: 21.09.1999 –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤",
        "PALM_300":  "–û–ø–ª–∞—Ç–∞ –ø–æ–ª—É—á–µ–Ω–∞ ‚úÖ –ü—Ä–∏—à–ª–∏ —Ñ–æ—Ç–æ –ª–∞–¥–æ–Ω–∏ (–ø—Ä–∞–≤–æ–π —Ä—É–∫–∏) –ø—Ä–∏ —Ö–æ—Ä–æ—à–µ–º –æ—Å–≤–µ—â–µ–Ω–∏–∏.",
        "NATAL_500": "–û–ø–ª–∞—Ç–∞ –ø–æ–ª—É—á–µ–Ω–∞ ‚úÖ –ù–∞–ø–∏—à–∏: –¥–∞—Ç–∞, –≤—Ä–µ–º—è (–µ—Å–ª–∏ –∑–Ω–∞–µ—à—å) –∏ –≥–æ—Ä–æ–¥ —Ä–æ–∂–¥–µ–Ω–∏—è.",
    }
    await update.message.reply_text(mapping.get(payload, "–û–ø–ª–∞—Ç–∞ –ø–æ–ª—É—á–µ–Ω–∞ ‚úÖ"))

def main():
    if not BOT_TOKEN:
        raise RuntimeError("–ù–µ –Ω–∞–π–¥–µ–Ω BOT_TOKEN –≤ –æ–∫—Ä—É–∂–µ–Ω–∏–∏. –î–æ–±–∞–≤—å –µ–≥–æ –≤ .env –∏–ª–∏ Railway Variables.")

    app = Application.builder().token(BOT_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(on_menu))
    app.add_handler(PreCheckoutQueryHandler(precheckout_handler))
    app.add_handler(MessageHandler(filters.SUCCESSFUL_PAYMENT, successful_payment_handler))

    log.info("Bot is starting with long polling...")
    app.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == "__main__":
    main()