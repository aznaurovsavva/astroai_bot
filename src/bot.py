import logging
import re
from datetime import datetime
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton, LabeledPrice
from telegram.ext import (
    Application, CommandHandler, CallbackQueryHandler,
    ContextTypes, PreCheckoutQueryHandler, MessageHandler, filters
)
from .config import BOT_TOKEN, TEST_MODE

logging.basicConfig(
    format="%(asctime)s [%(levelname)s] %(name)s: %(message)s",
    level=logging.INFO,
)
log = logging.getLogger("astro-num-bot")

if TEST_MODE:
    log.warning("[TEST MODE] Payments are disabled. Using simulated purchases.")

# --- –¶–µ–Ω—ã –≤ Stars (XTR). –≠–∫–≤–∏–≤–∞–ª–µ–Ω—Ç—ã –≤ —Ç–µ–∫—Å—Ç–µ –æ–ø–∏—Å–∞–Ω–∏—è. ---
PRICE_NUM   = 90   # ~200 ‚ÇΩ
PRICE_PALM  = 130   # ~300 ‚ÇΩ
PRICE_NATAL = 220   # ~500 ‚ÇΩ

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞ –¥–ª—è –ù–∞—Ç–∞–ª–∫–∏ PRO
NATAL_DATE = "natal_date"
NATAL_TIME = "natal_time"
NATAL_CITY = "natal_city"


async def send_service_text(q, caption: str, buy_cbdata: str, buy_label: str):
    kb = InlineKeyboardMarkup([
        [InlineKeyboardButton(buy_label, callback_data=buy_cbdata)],
        [InlineKeyboardButton("‚Üê –ù–∞–∑–∞–¥", callback_data="back_home")],
    ])
    try:
        await q.edit_message_text(caption, reply_markup=kb, parse_mode="Markdown")
    except Exception:
        # –ï—Å–ª–∏ –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ–ª—å–∑—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å (–∏–ª–∏ –±—ã–ª–æ —Ñ–æ—Ç–æ), –æ—Ç–ø—Ä–∞–≤–∏–º –Ω–æ–≤—ã–º
        await q.message.chat.send_message(caption, reply_markup=kb, parse_mode="Markdown")

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –±–µ–∑ —Å–ª–æ–≤–∞ "–æ–ø–ª–∞—Ç–∏—Ç—å"
MENU = [
    [InlineKeyboardButton("üî¢ –ù—É–º–µ—Ä–æ–ª–æ–≥–∏—è", callback_data="num")],
    [InlineKeyboardButton("ü™¨ –•–∏—Ä–æ–º–∞–Ω—Ç–∏—è", callback_data="palm")],
    [InlineKeyboardButton("üåå –ù–∞—Ç–∞–ª—å–Ω–∞—è –∫–∞—Ä—Ç–∞ Pro", callback_data="natal")],
]

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    intro = (
        "‚ú® –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ *AstroMagic* ‚ú®\n\n"
        "–ú—ã ‚Äî –∫–æ–º–∞–Ω–¥–∞ –ø—Ä–∞–∫—Ç–∏–∫—É—é—â–∏—Ö –∞—Å—Ç—Ä–æ–ª–æ–≥–æ–≤, –Ω—É–º–µ—Ä–æ–ª–æ–≥–æ–≤ –∏ –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª–µ–π —ç–∑–æ—Ç–µ—Ä–∏–∫–∏.\n"
        "–ù–∞—à–∞ —Ü–µ–ª—å ‚Äî —Å–¥–µ–ª–∞—Ç—å –≥–ª—É–±–æ–∫–∏–µ –∑–Ω–∞–Ω–∏—è –æ –∑–≤—ë–∑–¥–∞—Ö, —á–∏—Å–ª–∞—Ö –∏ –ª–∏–Ω–∏—è—Ö —Å—É–¥—å–±—ã –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ –∫–∞–∂–¥–æ–º—É.\n\n"
        "–ö–∞–∂–¥—ã–π —Ä–∞–∑–±–æ—Ä —Å–æ–∑–¥–∞—ë—Ç—Å—è —Å –≤–Ω–∏–º–∞–Ω–∏–µ–º –∫ –¥–µ—Ç–∞–ª—è–º, —Å –æ–ø–æ—Ä–æ–π –Ω–∞ –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–µ —à–∫–æ–ª—ã –∏ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–æ–¥—ã. "
        "–í—ã –ø–æ–ª—É—á–∞–µ—Ç–µ –Ω–µ –ø—Ä–æ—Å—Ç–æ —Å—É—Ö—É—é –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—é, –∞ –æ–±—Ä–∞–∑–Ω–æ–µ –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ —Ç–æ–≥–æ, —á—Ç–æ —Å–∫—Ä—ã—Ç–æ "
        "–≤ –≤–∞—à–µ–π –¥–∞—Ç–µ —Ä–æ–∂–¥–µ–Ω–∏—è, –Ω–∞—Ç–∞–ª—å–Ω–æ–π –∫–∞—Ä—Ç–µ –∏–ª–∏ –ª–∏–Ω–∏—è—Ö –ª–∞–¥–æ–Ω–∏.\n\n"
        "üîÆ –ß—Ç–æ –º—ã –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º:\n"
        "‚Ä¢ *–ù—É–º–µ—Ä–æ–ª–æ–≥–∏—è* ‚Äî –≤–∞—à —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–æ–¥ –ª–∏—á–Ω–æ—Å—Ç–∏ –∏ –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è.\n"
        "‚Ä¢ *–•–∏—Ä–æ–º–∞–Ω—Ç–∏—è* ‚Äî —á—Ç–µ–Ω–∏–µ –ª–∏–Ω–∏–π —Å—É–¥—å–±—ã –ø–æ —Ñ–æ—Ç–æ –ª–∞–¥–æ–Ω–∏.\n"
        "‚Ä¢ *–ù–∞—Ç–∞–ª—å–Ω–∞—è –∫–∞—Ä—Ç–∞ Pro* ‚Äî –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π —Ä–∞–∑–±–æ—Ä: –ø–ª–∞–Ω–µ—Ç—ã, –¥–æ–º–∞, –∞—Å–ø–µ–∫—Ç—ã + –Ω—É–º–µ—Ä–æ–ª–æ–≥–∏—è.\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∏–∂–µ, –∏ –º—ã –ø–æ–¥–≥–æ—Ç–æ–≤–∏–º –¥–ª—è –≤–∞—Å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —Ä–∞–∑–±–æ—Ä —Å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏."
    )
    if TEST_MODE:
        intro += "\n\n_–°–µ–π—á–∞—Å –≤–∫–ª—é—á—ë–Ω —Ç–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º: –æ–ø–ª–∞—Ç–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞, –¥–æ—Å—Ç—É–ø –≤—ã–¥–∞—ë—Ç—Å—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ–ª–æ—É._"
    await update.message.reply_text(intro, reply_markup=InlineKeyboardMarkup(MENU), parse_mode="Markdown")

async def menu_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    intro = (
        "‚ú® –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ *AstroMagic* ‚ú®\n\n"
        "–ú—ã ‚Äî –∫–æ–º–∞–Ω–¥–∞ –ø—Ä–∞–∫—Ç–∏–∫—É—é—â–∏—Ö –∞—Å—Ç—Ä–æ–ª–æ–≥–æ–≤, –Ω—É–º–µ—Ä–æ–ª–æ–≥–æ–≤ –∏ –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª–µ–π —ç–∑–æ—Ç–µ—Ä–∏–∫–∏.\n"
        "–ù–∞—à–∞ —Ü–µ–ª—å ‚Äî —Å–¥–µ–ª–∞—Ç—å –≥–ª—É–±–æ–∫–∏–µ –∑–Ω–∞–Ω–∏—è –æ –∑–≤—ë–∑–¥–∞—Ö, —á–∏—Å–ª–∞—Ö –∏ –ª–∏–Ω–∏—è—Ö —Å—É–¥—å–±—ã –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ –∫–∞–∂–¥–æ–º—É.\n\n"
        "–ö–∞–∂–¥—ã–π —Ä–∞–∑–±–æ—Ä —Å–æ–∑–¥–∞—ë—Ç—Å—è —Å –≤–Ω–∏–º–∞–Ω–∏–µ–º –∫ –¥–µ—Ç–∞–ª—è–º, —Å –æ–ø–æ—Ä–æ–π –Ω–∞ –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–µ —à–∫–æ–ª—ã –∏ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–æ–¥—ã. "
        "–í—ã –ø–æ–ª—É—á–∞–µ—Ç–µ –Ω–µ –ø—Ä–æ—Å—Ç–æ —Å—É—Ö—É—é –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—é, –∞ –æ–±—Ä–∞–∑–Ω–æ–µ –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ —Ç–æ–≥–æ, —á—Ç–æ —Å–∫—Ä—ã—Ç–æ "
        "–≤ –≤–∞—à–µ–π –¥–∞—Ç–µ —Ä–æ–∂–¥–µ–Ω–∏—è, –Ω–∞—Ç–∞–ª—å–Ω–æ–π –∫–∞—Ä—Ç–µ –∏–ª–∏ –ª–∏–Ω–∏—è—Ö –ª–∞–¥–æ–Ω–∏.\n\n"
        "üîÆ –ß—Ç–æ –º—ã –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º:\n"
        "‚Ä¢ *–ù—É–º–µ—Ä–æ–ª–æ–≥–∏—è* ‚Äî –≤–∞—à —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–æ–¥ –ª–∏—á–Ω–æ—Å—Ç–∏ –∏ –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è.\n"
        "‚Ä¢ *–•–∏—Ä–æ–º–∞–Ω—Ç–∏—è* ‚Äî —á—Ç–µ–Ω–∏–µ –ª–∏–Ω–∏–π —Å—É–¥—å–±—ã –ø–æ —Ñ–æ—Ç–æ –ª–∞–¥–æ–Ω–∏.\n"
        "‚Ä¢ *–ù–∞—Ç–∞–ª—å–Ω–∞—è –∫–∞—Ä—Ç–∞ Pro* ‚Äî –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π —Ä–∞–∑–±–æ—Ä: –ø–ª–∞–Ω–µ—Ç—ã, –¥–æ–º–∞, –∞—Å–ø–µ–∫—Ç—ã + –Ω—É–º–µ—Ä–æ–ª–æ–≥–∏—è.\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∏–∂–µ, –∏ –º—ã –ø–æ–¥–≥–æ—Ç–æ–≤–∏–º –¥–ª—è –≤–∞—Å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —Ä–∞–∑–±–æ—Ä —Å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏."
    )
    if TEST_MODE:
        intro += "\n\n_–°–µ–π—á–∞—Å –≤–∫–ª—é—á—ë–Ω —Ç–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º: –æ–ø–ª–∞—Ç–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞, –¥–æ—Å—Ç—É–ø –≤—ã–¥–∞—ë—Ç—Å—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ–ª–æ—É._"
    await update.message.reply_text(intro, reply_markup=InlineKeyboardMarkup(MENU), parse_mode="Markdown")

# –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –∏–Ω–≤–æ–π—Å–∞ –≤ Stars
async def send_stars_invoice(
    update_or_query, context: ContextTypes.DEFAULT_TYPE,
    title: str, desc: str, payload: str, amount_stars: int
):
    chat_id = (
        update_or_query.effective_chat.id
        if isinstance(update_or_query, Update)
        else update_or_query.message.chat.id
        if hasattr(update_or_query, "message")
        else update_or_query.from_user.id
    )
    prices = [LabeledPrice(label=title, amount=amount_stars)]  # –¥–ª—è XTR amount = –∫–æ–ª-–≤–æ –∑–≤—ë–∑–¥
    await context.bot.send_invoice(
        chat_id=chat_id,
        title=title,
        description=desc,
        payload=payload,           # –≤–µ—Ä–Ω—ë—Ç—Å—è –≤ successful_payment
        provider_token="",         # –¥–ª—è Telegram Stars –æ—Å—Ç–∞–≤–ª—è–µ–º –ø—É—Å—Ç—ã–º
        currency="XTR",            # –∫–ª—é—á–µ–≤–æ–π –º–æ–º–µ–Ω—Ç!
        prices=prices,
        start_parameter="buy",
        need_name=False,
        need_phone_number=False,
        need_email=False,
        need_shipping_address=False,
        is_flexible=False,
    )

async def on_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    await q.answer()
    if q.data == "num":
        caption_num = (
            "üî¢ *–ù—É–º–µ—Ä–æ–ª–æ–≥–∏—è*\n\n"
            "–ß–∏—Å–ª–∞ ‚Äî —ç—Ç–æ —è–∑—ã–∫, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º –í—Å–µ–ª–µ–Ω–Ω–∞—è —à–µ–ø—á–µ—Ç –æ –Ω–∞—à–∏—Ö –¥–∞—Ä–∞—Ö –∏ —É—Ä–æ–∫–∞—Ö. –Ø —Ä–∞—Å—Å—á–∏—Ç–∞—é –∫–ª—é—á–µ–≤—ã–µ —á–∏—Å–ª–∞ (—Å—É–¥—å–±—ã, –¥—É—à–∏, –ª–∏—á–Ω–æ—Å—Ç–∏, –∏–º–µ–Ω–∏) –∏ —Ä–∞–∑–ª–æ–∂—É –ø–æ –ø–æ–ª–æ—á–∫–∞–º: —Å–∏–ª—å–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã, –∑–æ–Ω—ã —Ä–æ—Å—Ç–∞ –∏ –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —à–∞–≥–∏.\n\n"
            "–ß—Ç–æ —Ç—ã –ø–æ–ª—É—á–∏—à—å:\n"
            "‚Ä¢ –ö—Ä–∞—Ç–∫–∏–π –ø–æ—Ä—Ç—Ä–µ—Ç –Ω–∞ 3‚Äì4 –∞–±–∑–∞—Ü–∞;\n"
            "‚Ä¢ –†–∞–∑–±–æ—Ä –∫–∞–∂–¥–æ–≥–æ —á–∏—Å–ª–∞;\n"
            "‚Ä¢ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –º–µ—Å—è—Ü.\n\n"
            "–°—Ç–æ–∏–º–æ—Å—Ç—å: *90 ‚≠ê* (‚âà 200 ‚ÇΩ)."
        )
        await send_service_text(q, caption_num, "buy_num", "–û–ø–ª–∞—Ç–∏—Ç—å 90 ‚≠ê")
    elif q.data == "palm":
        caption_palm = (
            "ü™¨ *–•–∏—Ä–æ–º–∞–Ω—Ç–∏—è*\n\n"
            "–õ–∞–¥–æ–Ω—å ‚Äî –∂–∏–≤–æ–π –¥–Ω–µ–≤–Ω–∏–∫ —Å—É–¥—å–±—ã. –ü–æ —Ñ–æ—Ç–æ –ø—Ä–∞–≤–æ–π —Ä—É–∫–∏ —è —Ä–∞—Å—Å–º–æ—Ç—Ä—é –ª–∏–Ω–∏–∏ —Å–µ—Ä–¥—Ü–∞, –≥–æ–ª–æ–≤—ã –∏ –∂–∏–∑–Ω–∏, —Ö–æ–ª–º—ã –∏ –æ–±—â–∏–π —Ä–∏—Å—É–Ω–æ–∫, —á—Ç–æ–±—ã –º—è–≥–∫–æ –ø–æ–¥—Å–≤–µ—Ç–∏—Ç—å —Ç–≤–æ–∏ —Ç–∞–ª–∞–Ω—Ç—ã –∏ —Ç–µ–∫—É—â–∏–µ –≤—ã–∑–æ–≤—ã.\n\n"
            "–ß—Ç–æ –Ω—É–∂–Ω–æ –æ—Ç —Ç–µ–±—è: –æ–¥–Ω–æ —á—ë—Ç–∫–æ–µ —Ñ–æ—Ç–æ –ª–∞–¥–æ–Ω–∏ –ø—Ä–∏ —Ö–æ—Ä–æ—à–µ–º —Å–≤–µ—Çe.\n\n"
            "–ß—Ç–æ —Ç—ã –ø–æ–ª—É—á–∏—à—å: –æ–±—Ä–∞–∑–Ω—ã–π —Ä–∞–∑–±–æ—Ä –Ω–∞ 3‚Äì5 –∞–±–∑–∞—Ü–µ–≤ + –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Å–æ–≤–µ—Ç—ã.\n\n"
            "–°—Ç–æ–∏–º–æ—Å—Ç—å: *130 ‚≠ê* (‚âà 300 ‚ÇΩ)."
        )
        await send_service_text(q, caption_palm, "buy_palm", "–û–ø–ª–∞—Ç–∏—Ç—å 130 ‚≠ê")
    elif q.data == "natal":
        caption_natal = (
            "üåå *–ù–∞—Ç–∞–ª—å–Ω–∞—è –∫–∞—Ä—Ç–∞ Pro*\n\n"
            "–¢–≤–æ–π –ª–∏—á–Ω—ã–π –Ω–µ–±–µ—Å–Ω—ã–π –∞—Ç–ª–∞—Å: –ø–ª–∞–Ω–µ—Ç—ã, –∑–Ω–∞–∫–∏, *–¥–æ–º–∞* –∏ –∫–ª—é—á–µ–≤—ã–µ *–∞—Å–ø–µ–∫—Ç—ã* + –Ω—É–º–µ—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π —à—Ç—Ä–∏—Ö-–∫–æ–¥. –û—Ç–¥–µ–ª—å–Ω–æ –æ—Ç–º–µ—á—É —Ä–µ—Å—É—Ä—Å—ã, —Ä–∏—Å–∫–∏ –∏ –º—è–≥–∫–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –±–ª–∏–∂–∞–π—à–∏–π —Ü–∏–∫–ª.\n\n"
            "–ß—Ç–æ –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è: –¥–∞—Ç–∞, –≥–æ—Ä–æ–¥ –∏ ‚Äî –ø–æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ ‚Äî —Ç–æ—á–Ω–æ–µ –≤—Ä–µ–º—è —Ä–æ–∂–¥–µ–Ω–∏—è.\n\n"
            "–†–µ–∑—É–ª—å—Ç–∞—Ç: —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç 6‚Äì10 –∞–±–∑–∞—Ü–µ–≤.\n\n"
            "–°—Ç–æ–∏–º–æ—Å—Ç—å: *220 ‚≠ê* (‚âà 500 ‚ÇΩ)."
        )
        await send_service_text(q, caption_natal, "buy_natal", "–û–ø–ª–∞—Ç–∏—Ç—å 220 ‚≠ê")
    elif q.data == "back_home":
        try:
            await q.message.delete()
        except Exception:
            pass
        intro = (
            "‚ú® –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ *AstroMagic* ‚ú®\n\n"
            "–ú—ã ‚Äî –∫–æ–º–∞–Ω–¥–∞ –ø—Ä–∞–∫—Ç–∏–∫—É—é—â–∏—Ö –∞—Å—Ç—Ä–æ–ª–æ–≥–æ–≤, –Ω—É–º–µ—Ä–æ–ª–æ–≥–æ–≤ –∏ –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª–µ–π —ç–∑–æ—Ç–µ—Ä–∏–∫–∏.\n"
            "–ù–∞—à–∞ —Ü–µ–ª—å ‚Äî —Å–¥–µ–ª–∞—Ç—å –≥–ª—É–±–æ–∫–∏–µ –∑–Ω–∞–Ω–∏—è –æ –∑–≤—ë–∑–¥–∞—Ö, —á–∏—Å–ª–∞—Ö –∏ –ª–∏–Ω–∏—è—Ö —Å—É–¥—å–±—ã –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ –∫–∞–∂–¥–æ–º—É.\n\n"
            "–ö–∞–∂–¥—ã–π —Ä–∞–∑–±–æ—Ä —Å–æ–∑–¥–∞—ë—Ç—Å—è —Å –≤–Ω–∏–º–∞–Ω–∏–µ–º –∫ –¥–µ—Ç–∞–ª—è–º, —Å –æ–ø–æ—Ä–æ–π –Ω–∞ –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–µ —à–∫–æ–ª—ã –∏ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–æ–¥—ã. "
            "–í—ã –ø–æ–ª—É—á–∞–µ—Ç–µ –Ω–µ –ø—Ä–æ—Å—Ç–æ —Å—É—Ö—É—é –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—é, –∞ –æ–±—Ä–∞–∑–Ω–æ–µ –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ —Ç–æ–≥–æ, —á—Ç–æ —Å–∫—Ä—ã—Ç–æ "
            "–≤ –≤–∞—à–µ–π –¥–∞—Ç–µ —Ä–æ–∂–¥–µ–Ω–∏—è, –Ω–∞—Ç–∞–ª—å–Ω–æ–π –∫–∞—Ä—Ç–µ –∏–ª–∏ –ª–∏–Ω–∏—è—Ö –ª–∞–¥–æ–Ω–∏.\n\n"
            "üîÆ –ß—Ç–æ –º—ã –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º:\n"
            "‚Ä¢ *–ù—É–º–µ—Ä–æ–ª–æ–≥–∏—è* ‚Äî –≤–∞—à —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–æ–¥ –ª–∏—á–Ω–æ—Å—Ç–∏ –∏ –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è.\n"
            "‚Ä¢ *–•–∏—Ä–æ–º–∞–Ω—Ç–∏—è* ‚Äî —á—Ç–µ–Ω–∏–µ –ª–∏–Ω–∏–π —Å—É–¥—å–±—ã –ø–æ —Ñ–æ—Ç–æ –ª–∞–¥–æ–Ω–∏.\n"
            "‚Ä¢ *–ù–∞—Ç–∞–ª—å–Ω–∞—è –∫–∞—Ä—Ç–∞ Pro* ‚Äî –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π —Ä–∞–∑–±–æ—Ä: –ø–ª–∞–Ω–µ—Ç—ã, –¥–æ–º–∞, –∞—Å–ø–µ–∫—Ç—ã + –Ω—É–º–µ—Ä–æ–ª–æ–≥–∏—è.\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∏–∂–µ, –∏ –º—ã –ø–æ–¥–≥–æ—Ç–æ–≤–∏–º –¥–ª—è –≤–∞—Å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —Ä–∞–∑–±–æ—Ä —Å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏."
        )
        if TEST_MODE:
            intro += "\n\n_–°–µ–π—á–∞—Å –≤–∫–ª—é—á—ë–Ω —Ç–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º: –æ–ø–ª–∞—Ç–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞, –¥–æ—Å—Ç—É–ø –≤—ã–¥–∞—ë—Ç—Å—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ–ª–æ—É._"
        await q.message.chat.send_message(
            intro,
            reply_markup=InlineKeyboardMarkup(MENU),
            parse_mode="Markdown",
        )
    elif q.data == "buy_num":
        if TEST_MODE:
            await _begin_flow_after_payment("NUM_200", update, context)
        else:
            await send_stars_invoice(
                q, context,
                "–ù—É–º–µ—Ä–æ–ª–æ–≥–∏—è",
                "–ö—Ä–∞—Ç–∫–∏–π –Ω—É–º–µ—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π —Ä–∞–∑–±–æ—Ä (‚âà 200 ‚ÇΩ).",
                "NUM_200", PRICE_NUM
            )
    elif q.data == "buy_palm":
        if TEST_MODE:
            await _begin_flow_after_payment("PALM_300", update, context)
        else:
            await send_stars_invoice(
                q, context,
                "–•–∏—Ä–æ–º–∞–Ω—Ç–∏—è",
                "–†–∞–∑–±–æ—Ä –ø–æ —Ñ–æ—Ç–æ –ª–∞–¥–æ–Ω–∏ (‚âà 300 ‚ÇΩ).",
                "PALM_300", PRICE_PALM
            )
    elif q.data == "buy_natal":
        if TEST_MODE:
            await _begin_flow_after_payment("NATAL_500", update, context)
        else:
            await send_stars_invoice(
                q, context,
                "–ù–∞—Ç–∞–ª—å–Ω–∞—è –∫–∞—Ä—Ç–∞ Pro",
                "–ù–∞—Ç–∞–ª—å–Ω–∞—è –∫–∞—Ä—Ç–∞ + –¥–æ–º–∞ + –∞—Å–ø–µ–∫—Ç—ã + –Ω—É–º–µ—Ä–æ–ª–æ–≥–∏—è (‚âà 500 ‚ÇΩ).",
                "NATAL_500", PRICE_NATAL
            )
    else:
        await q.edit_message_text("–í—ã–±–∏—Ä–∞–π —É—Å–ª—É–≥—É ‚§¥Ô∏è")

# –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π pre-checkout (–∑–¥–µ—Å—å –º–æ–∂–Ω–æ –≤—Å—Ç–∞–≤–∏—Ç—å –≤–∞–ª–∏–¥–∞—Ü–∏–∏)
async def precheckout_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.pre_checkout_query.answer(ok=True)

async def _begin_flow_after_payment(payload: str, update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Starts the appropriate dialog flow as if payment succeeded."""
    if payload == "NATAL_500":
        ud = context.user_data
        ud.clear()
        ud["flow"] = "natal"
        ud["state"] = NATAL_DATE
        await update.effective_chat.send_message(
            "–û–ø–ª–∞—Ç–∞ –ø–æ–ª—É—á–µ–Ω–∞ ‚úÖ\n\n–î–∞–≤–∞–π –Ω–∞—á–Ω—ë–º —Ä–∞–∑–±–æ—Ä.\n"
            "1) –ù–∞–ø–∏—à–∏ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì\n\n"
            "–ü—Ä–∏–º–µ—Ä: 21.09.1999"
        )
        return

    if payload == "PALM_300":
        ud = context.user_data
        ud.clear()
        ud["flow"] = "palm"
        # –í –±—É–¥—É—â–µ–º –¥–æ–±–∞–≤–∏–º –ø—Ä–æ–≤–µ—Ä–∫—É —Ñ–æ—Ç–æ; –ø–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ—Å–∏–º —Ñ–æ—Ç–æ
        await update.effective_chat.send_message(
            "–û–ø–ª–∞—Ç–∞ –ø–æ–ª—É—á–µ–Ω–∞ ‚úÖ\n\n–ü—Ä–∏—à–ª–∏ *–æ–¥–Ω–æ —á—ë—Ç–∫–æ–µ —Ñ–æ—Ç–æ –ø—Ä–∞–≤–æ–π –ª–∞–¥–æ–Ω–∏* –ø—Ä–∏ —Ö–æ—Ä–æ—à–µ–º –æ—Å–≤–µ—â–µ–Ω–∏–∏.",
            parse_mode="Markdown",
        )
        return

    if payload == "NUM_200":
        ud = context.user_data
        ud.clear()
        ud["flow"] = "num"
        await update.effective_chat.send_message(
            "–û–ø–ª–∞—Ç–∞ –ø–æ–ª—É—á–µ–Ω–∞ ‚úÖ\n\n–ù–∞–ø–∏—à–∏ *–¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –∏ –§–ò–û –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–æ–π* –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
            "`–î–î.–ú–ú.–ì–ì–ì–ì –ò–º—è –§–∞–º–∏–ª–∏—è`\n\n–ù–∞–ø—Ä–∏–º–µ—Ä: `21.09.1999 –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤`",
            parse_mode="Markdown",
        )
        return

    await update.effective_chat.send_message("–û–ø–ª–∞—Ç–∞ –ø–æ–ª—É—á–µ–Ω–∞ ‚úÖ")

async def successful_payment_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    sp = update.message.successful_payment
    payload = sp.invoice_payload
    charge_id = sp.telegram_payment_charge_id
    log.info(f"Payment ok: payload={payload}, charge_id={charge_id}, amount={sp.total_amount} XTR")
    await _begin_flow_after_payment(payload, update, context)

async def text_router(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = (update.message.text or "").strip()
    ud = context.user_data

    # –ï—Å–ª–∏ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–æ—Ç–æ–∫–∞ ‚Äî –≤—ã—Ö–æ–¥–∏–º
    if ud.get("flow") != "natal":
        return

    state = ud.get("state")

    # –®–ê–ì 1 ‚Äî –î–ê–¢–ê
    if state == NATAL_DATE:
        if not re.fullmatch(r"\d{2}\.\d{2}\.\d{4}", text):
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì. –ù–∞–ø—Ä–∏–º–µ—Ä: 07.03.1995")
            return
        try:
            _ = datetime.strptime(text, "%d.%m.%Y")
        except ValueError:
            await update.message.reply_text("–ü–æ—Ö–æ–∂–µ, –¥–∞—Ç–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞. –ü—Ä–æ–≤–µ—Ä—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏ –ø—Ä–∏—à–ª–∏ –µ—â—ë —Ä–∞–∑.")
            return
        ud["natal_date"] = text
        ud["state"] = NATAL_TIME
        await update.message.reply_text(
            "–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏ *–≤—Ä–µ–º—è —Ä–æ–∂–¥–µ–Ω–∏—è* –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú.\n"
            "–ï—Å–ª–∏ –Ω–µ –∑–Ω–∞–µ—à—å —Ç–æ—á–Ω–æ–µ –≤—Ä–µ–º—è ‚Äî –Ω–∞–ø–∏—à–∏ ‚Äò–Ω–µ –∑–Ω–∞—é‚Äô.",
            parse_mode="Markdown",
        )
        return

    # –®–ê–ì 2 ‚Äî –í–†–ï–ú–Ø
    if state == NATAL_TIME:
        low = text.lower()
        if low in ("–Ω–µ –∑–Ω–∞—é", "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ", "–Ω–µ—Ç", "-"):
            ud["natal_time"] = None
        else:
            if not re.fullmatch(r"\d{1,2}:\d{2}", text):
                await update.message.reply_text("–í—Ä–µ–º—è —É–∫–∞–∂–∏ —Ç–∞–∫: –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 14:25) –∏–ª–∏ –Ω–∞–ø–∏—à–∏ ‚Äò–Ω–µ –∑–Ω–∞—é‚Äô.")
                return
            hh, mm = map(int, text.split(":"))
            if not (0 <= hh <= 23 and 0 <= mm <= 59):
                await update.message.reply_text("–ü—Ä–æ–≤–µ—Ä—å —á–∞—Å—ã –∏ –º–∏–Ω—É—Ç—ã (0‚Äì23 –∏ 0‚Äì59). –ü—Ä–∏—à–ª–∏ –≤—Ä–µ–º—è –µ—â—ë —Ä–∞–∑.")
                return
            ud["natal_time"] = f"{hh:02d}:{mm:02d}"
        ud["state"] = NATAL_CITY
        await update.message.reply_text(
            "–ò –ø–æ—Å–ª–µ–¥–Ω–∏–π —à–∞–≥: *–≥–æ—Ä–æ–¥ —Ä–æ–∂–¥–µ–Ω–∏—è* (–º–æ–∂–Ω–æ —Å–æ —Å—Ç—Ä–∞–Ω–æ–π/–æ–±–ª–∞—Å—Ç—å—é –¥–ª—è —Ç–æ—á–Ω–æ—Å—Ç–∏).\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: ‚Äò–û–º—Å–∫, –†–æ—Å—Å–∏—è‚Äô –∏–ª–∏ ‚ÄòAlmaty, Kazakhstan‚Äô.",
            parse_mode="Markdown",
        )
        return

    # –®–ê–ì 3 ‚Äî –ì–û–†–û–î
    if state == NATAL_CITY:
        if len(text) < 2:
            await update.message.reply_text("–ù—É–∂–Ω–æ –Ω–∞–∑–≤–∞—Ç—å –Ω–∞—Å–µ–ª—ë–Ω–Ω—ã–π –ø—É–Ω–∫—Ç. –ü—Ä–∏—à–ª–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –µ—â—ë —Ä–∞–∑.")
            return
        ud["natal_city"] = text

        date_str = ud.get("natal_date")
        time_str = ud.get("natal_time") or "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
        city_str = ud.get("natal_city")

        # –°–±—Ä–æ—Å–∏–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        ud["flow"] = None
        ud["state"] = None

        await update.message.reply_text(
            "–°–ø–∞—Å–∏–±–æ! –Ø –∑–∞–ø–∏—Å–∞–ª –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ù–∞—Ç–∞–ª–∫–∏ PRO:\n\n"
            f"‚Ä¢ –î–∞—Ç–∞: *{date_str}*\n"
            f"‚Ä¢ –í—Ä–µ–º—è: *{time_str}*\n"
            f"‚Ä¢ –ì–æ—Ä–æ–¥: *{city_str}*\n\n"
            "–ù–∞ —Å–ª–µ–¥—É—é—â–µ–º —à–∞–≥–µ –ø–æ–¥–∫–ª—é—á–∏–º —Ç–æ—á–Ω—ã–µ —Ä–∞—Å—á—ë—Ç—ã –∏ –ø—Ä–∏—à–ª—ë–º —Ä–∞–∑–±–æ—Ä.",
            parse_mode="Markdown",
        )
        return

def main():
    if not BOT_TOKEN:
        raise RuntimeError("–ù–µ –Ω–∞–π–¥–µ–Ω BOT_TOKEN –≤ –æ–∫—Ä—É–∂–µ–Ω–∏–∏. –î–æ–±–∞–≤—å –µ–≥–æ –≤ .env –∏–ª–∏ Railway Variables.")

    app = Application.builder().token(BOT_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("menu", menu_cmd))
    app.add_handler(CallbackQueryHandler(on_menu))
    app.add_handler(PreCheckoutQueryHandler(precheckout_handler))
    app.add_handler(MessageHandler(filters.SUCCESSFUL_PAYMENT, successful_payment_handler))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, text_router))

    log.info("Bot is starting with long polling...")
    app.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == "__main__":
    main()