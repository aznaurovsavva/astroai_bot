import logging
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton, LabeledPrice
from telegram.ext import (
    Application, CommandHandler, CallbackQueryHandler,
    ContextTypes, PreCheckoutQueryHandler, MessageHandler, filters
)
from .config import BOT_TOKEN

logging.basicConfig(
    format="%(asctime)s [%(levelname)s] %(name)s: %(message)s",
    level=logging.INFO,
)
log = logging.getLogger("astro-num-bot")

# --- –¶–µ–Ω—ã –≤ Stars (XTR). –≠–∫–≤–∏–≤–∞–ª–µ–Ω—Ç—ã –≤ —Ç–µ–∫—Å—Ç–µ –æ–ø–∏—Å–∞–Ω–∏—è. ---
PRICE_NUM   = 200   # ~200 ‚ÇΩ
PRICE_PALM  = 300   # ~300 ‚ÇΩ
PRICE_NATAL = 500   # ~500 ‚ÇΩ

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å –æ–ø–ª–∞—Ç–æ–π
MENU = [
    [InlineKeyboardButton("üî¢ –ù—É–º–µ—Ä–æ–ª–æ–≥–∏—è ‚Äî –æ–ø–ª–∞—Ç–∏—Ç—å", callback_data="buy_num")],
    [InlineKeyboardButton("ü™¨ –•–∏—Ä–æ–º–∞–Ω—Ç–∏—è ‚Äî –æ–ø–ª–∞—Ç–∏—Ç—å", callback_data="buy_palm")],
    [InlineKeyboardButton("üåå –ù–∞—Ç–∞–ª–∫–∞ PRO ‚Äî –æ–ø–ª–∞—Ç–∏—Ç—å", callback_data="buy_natal")],
]

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –¥–µ–ª–∞—é –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –∏ –Ω—É–º–µ—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ —Ä–∞–∑–±–æ—Ä—ã üîÆ\n–í—ã–±–µ—Ä–∏ —É—Å–ª—É–≥—É –¥–ª—è –æ–ø–ª–∞—Ç—ã:",
        reply_markup=InlineKeyboardMarkup(MENU),
    )

# –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –∏–Ω–≤–æ–π—Å–∞ –≤ Stars
async def send_stars_invoice(
    update_or_query, context: ContextTypes.DEFAULT_TYPE,
    title: str, desc: str, payload: str, amount_stars: int
):
    chat_id = (
        update_or_query.effective_chat.id
        if isinstance(update_or_query, Update)
        else update_or_query.message.chat.id
        if hasattr(update_or_query, "message")
        else update_or_query.from_user.id
    )
    prices = [LabeledPrice(label=title, amount=amount_stars)]  # –¥–ª—è XTR amount = –∫–æ–ª-–≤–æ –∑–≤—ë–∑–¥
    await context.bot.send_invoice(
        chat_id=chat_id,
        title=title,
        description=desc,
        payload=payload,           # –≤–µ—Ä–Ω—ë—Ç—Å—è –≤ successful_payment
        provider_token="",         # –¥–ª—è Telegram Stars –æ—Å—Ç–∞–≤–ª—è–µ–º –ø—É—Å—Ç—ã–º
        currency="XTR",            # –∫–ª—é—á–µ–≤–æ–π –º–æ–º–µ–Ω—Ç!
        prices=prices,
        start_parameter="buy",
        need_name=False,
        need_phone_number=False,
        need_email=False,
        need_shipping_address=False,
        is_flexible=False,
    )

async def on_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    await q.answer()
    if q.data == "buy_num":
        await send_stars_invoice(
            q, context,
            "–ù—É–º–µ—Ä–æ–ª–æ–≥–∏—è",
            "–ö—Ä–∞—Ç–∫–∏–π –Ω—É–º–µ—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π —Ä–∞–∑–±–æ—Ä (‚âà 200 ‚ÇΩ).",
            "NUM_200", PRICE_NUM
        )
    elif q.data == "buy_palm":
        await send_stars_invoice(
            q, context,
            "–•–∏—Ä–æ–º–∞–Ω—Ç–∏—è",
            "–†–∞–∑–±–æ—Ä –ø–æ —Ñ–æ—Ç–æ –ª–∞–¥–æ–Ω–∏ (‚âà 300 ‚ÇΩ).",
            "PALM_300", PRICE_PALM
        )
    elif q.data == "buy_natal":
        await send_stars_invoice(
            q, context,
            "–ù–∞—Ç–∞–ª–∫–∞ PRO",
            "–ù–∞—Ç–∞–ª—å–Ω–∞—è –∫–∞—Ä—Ç–∞ + –¥–æ–º–∞ + –∞—Å–ø–µ–∫—Ç—ã + –Ω—É–º–µ—Ä–æ–ª–æ–≥–∏—è (‚âà 500 ‚ÇΩ).",
            "NATAL_500", PRICE_NATAL
        )
    else:
        await q.edit_message_text("–í—ã–±–∏—Ä–∞–π —É—Å–ª—É–≥—É –¥–ª—è –æ–ø–ª–∞—Ç—ã ‚§¥Ô∏è")

# –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π pre-checkout (–∑–¥–µ—Å—å –º–æ–∂–Ω–æ –≤—Å—Ç–∞–≤–∏—Ç—å –≤–∞–ª–∏–¥–∞—Ü–∏–∏)
async def precheckout_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.pre_checkout_query.answer(ok=True)

# –£—Å–ø–µ—à–Ω–∞—è –æ–ø–ª–∞—Ç–∞
async def successful_payment_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    sp = update.message.successful_payment
    payload = sp.invoice_payload  # –Ω–∞–ø—Ä–∏–º–µ—Ä "NATAL_500"
    # TODO: –∑–¥–µ—Å—å –∑–∞–ø–∏—à–µ–º –∑–∞–∫–∞–∑ –≤ –ë–î (tg_id, payload, —Å—É–º–º–∞, charge_id)
    charge_id = sp.telegram_payment_charge_id
    log.info(f"Payment ok: payload={payload}, charge_id={charge_id}, amount={sp.total_amount} XTR")

    mapping = {
        "NUM_200":   "–û–ø–ª–∞—Ç–∞ –ø–æ–ª—É—á–µ–Ω–∞ ‚úÖ –ü—Ä–∏—à–ª–∏ –§–ò–û –∏ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ: 21.09.1999 –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤",
        "PALM_300":  "–û–ø–ª–∞—Ç–∞ –ø–æ–ª—É—á–µ–Ω–∞ ‚úÖ –ü—Ä–∏—à–ª–∏ —Ñ–æ—Ç–æ –ª–∞–¥–æ–Ω–∏ (–ø—Ä–∞–≤–æ–π —Ä—É–∫–∏) –ø—Ä–∏ —Ö–æ—Ä–æ—à–µ–º –æ—Å–≤–µ—â–µ–Ω–∏–∏.",
        "NATAL_500": "–û–ø–ª–∞—Ç–∞ –ø–æ–ª—É—á–µ–Ω–∞ ‚úÖ –ù–∞–ø–∏—à–∏: –¥–∞—Ç–∞, –≤—Ä–µ–º—è (–µ—Å–ª–∏ –∑–Ω–∞–µ—à—å) –∏ –≥–æ—Ä–æ–¥ —Ä–æ–∂–¥–µ–Ω–∏—è.",
    }
    await update.message.reply_text(mapping.get(payload, "–û–ø–ª–∞—Ç–∞ –ø–æ–ª—É—á–µ–Ω–∞ ‚úÖ"))

def main():
    if not BOT_TOKEN:
        raise RuntimeError("–ù–µ –Ω–∞–π–¥–µ–Ω BOT_TOKEN –≤ –æ–∫—Ä—É–∂–µ–Ω–∏–∏. –î–æ–±–∞–≤—å –µ–≥–æ –≤ .env –∏–ª–∏ Railway Variables.")

    app = Application.builder().token(BOT_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(on_menu))
    app.add_handler(PreCheckoutQueryHandler(precheckout_handler))
    app.add_handler(MessageHandler(filters.SUCCESSFUL_PAYMENT, successful_payment_handler))

    log.info("Bot is starting with long polling...")
    app.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == "__main__":
    main()