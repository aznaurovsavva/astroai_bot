import logging
import re
from datetime import datetime
import os, json, sqlite3
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton, LabeledPrice
from telegram.ext import (
    Application, CommandHandler, CallbackQueryHandler,
    ContextTypes, PreCheckoutQueryHandler, MessageHandler, filters
)
from .config import BOT_TOKEN, TEST_MODE, ADMIN_ID

logging.basicConfig(
    format="%(asctime)s [%(levelname)s] %(name)s: %(message)s",
    level=logging.INFO,
)
log = logging.getLogger("astro-num-bot")

if TEST_MODE:
    log.warning("[TEST MODE] Payments are disabled. Using simulated purchases.")

log.info(f"ADMIN_ID set to: {ADMIN_ID}")

# --- Simple SQLite storage (profiles + orders) ---
DB_PATH = os.getenv("DB_PATH", "data.sqlite3")

def _conn():
  return sqlite3.connect(DB_PATH)

def init_db():
  con = _conn(); cur = con.cursor()
  cur.execute("""
    CREATE TABLE IF NOT EXISTS profiles(
      user_id    INTEGER PRIMARY KEY,
      full_name  TEXT,
      username   TEXT,
      lang       TEXT,
      created_at TEXT,
      last_seen  TEXT
    )
  """)
  cur.execute("""
    CREATE TABLE IF NOT EXISTS orders(
      id            INTEGER PRIMARY KEY AUTOINCREMENT,
      user_id       INTEGER,
      payload       TEXT,
      amount_stars  INTEGER,
      status        TEXT,
      charge_id     TEXT,
      meta_json     TEXT,
      created_at    TEXT,
      updated_at    TEXT
    )
  """)
  con.commit(); con.close()

def upsert_profile(user_id: int, full_name: str = "", username: str = "", lang: str = ""):
  now = datetime.utcnow().isoformat()
  con = _conn(); cur = con.cursor()
  cur.execute("SELECT user_id FROM profiles WHERE user_id=?", (user_id,))
  row = cur.fetchone()
  if row:
    cur.execute("""UPDATE profiles
                   SET full_name=?, username=?, lang=?, last_seen=?
                   WHERE user_id=?""",
                (full_name, username, lang, now, user_id))
  else:
    cur.execute("""INSERT INTO profiles(user_id, full_name, username, lang, created_at, last_seen)
                   VALUES(?,?,?,?,?,?)""",
                (user_id, full_name, username, lang, now, now))
  con.commit(); con.close()

def create_order(user_id: int, payload: str, amount_stars: int, status: str = "awaiting_input", charge_id: str | None = None, meta: dict | None = None) -> int:
  now = datetime.utcnow().isoformat()
  con = _conn(); cur = con.cursor()
  cur.execute("""INSERT INTO orders(user_id, payload, amount_stars, status, charge_id, meta_json, created_at, updated_at)
                 VALUES(?,?,?,?,?,?,?,?)""",
              (user_id, payload, amount_stars, status, charge_id, json.dumps(meta or {}, ensure_ascii=False), now, now))
  oid = cur.lastrowid
  con.commit(); con.close()
  return oid

def update_order(order_id: int, *, status: str | None = None, meta_merge: dict | None = None, charge_id: str | None = None):
  con = _conn(); cur = con.cursor()
  cur.execute("SELECT meta_json FROM orders WHERE id=?", (order_id,))
  row = cur.fetchone()
  meta = {} if not row or not row[0] else json.loads(row[0])
  if meta_merge:
    meta.update(meta_merge)
  sets, params = [], []
  if status is not None:
    sets.append("status=?"); params.append(status)
  if charge_id is not None:
    sets.append("charge_id=?"); params.append(charge_id)
  sets.extend(["meta_json=?", "updated_at=?"])
  params.extend([json.dumps(meta, ensure_ascii=False), datetime.utcnow().isoformat(), order_id])
  cur.execute(f"UPDATE orders SET {', '.join(sets)} WHERE id=?", params)
  con.commit(); con.close()

# --- Helper to fetch recent orders ---
def fetch_last_orders(limit: int = 5):
    con = _conn(); cur = con.cursor()
    cur.execute(
        """
        SELECT id, user_id, payload, amount_stars, status, charge_id, created_at
        FROM orders
        ORDER BY id DESC
        LIMIT ?
        """,
        (limit,)
    )
    rows = cur.fetchall()
    con.close()
    return rows

# --- –¶–µ–Ω—ã –≤ Stars (XTR). –≠–∫–≤–∏–≤–∞–ª–µ–Ω—Ç—ã –≤ —Ç–µ–∫—Å—Ç–µ –æ–ø–∏—Å–∞–Ω–∏—è. ---
PRICE_NUM   = 90   # ~200 ‚ÇΩ
PRICE_PALM  = 130   # ~300 ‚ÇΩ
PRICE_NATAL = 220   # ~500 ‚ÇΩ

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞ –¥–ª—è –ù–∞—Ç–∞–ª–∫–∏ PRO
NATAL_DATE = "natal_date"
NATAL_TIME = "natal_time"
NATAL_CITY = "natal_city"

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Ö–∏—Ä–æ–º–∞–Ω—Ç–∏–∏ –∏ –Ω—É–º–µ—Ä–æ–ª–æ–≥–∏–∏
PALM_PHOTO = "palm_photo"
NUM_INPUT  = "num_input"

# –ö–∞—Ä—Ç–∞ —Å—É–º–º –¥–ª—è –∑–∞–ø–∏—Å–∏ –≤ –∑–∞–∫–∞–∑—ã

AMOUNT_BY_PAYLOAD = {
    "NUM_200": PRICE_NUM,
    "PALM_300": PRICE_PALM,
    "NATAL_500": PRICE_NATAL,
}

# --- –ù—É–º–µ—Ä–æ–ª–æ–≥–∏—è: —Ä–∞—Å—á—ë—Ç —á–∏—Å–ª–∞ —Å—É–¥—å–±—ã + –∫–æ—Ä–æ—Ç–∫–∏–µ —Ç—Ä–∞–∫—Ç–æ–≤–∫–∏ ---
NUM_DESCRIPTIONS = {
    1: "–õ–∏–¥–µ—Ä—Å—Ç–≤–æ, —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ—Å—Ç—å, –∏–º–ø—É–ª—å—Å –∫ –Ω–∞—á–∞–ª—É.",
    2: "–î–∏–ø–ª–æ–º–∞—Ç–∏—è, –ø–∞—Ä—Ç–Ω—ë—Ä—Å—Ç–≤–æ, —á—É—Ç–∫–æ—Å—Ç—å.",
    3: "–ö–æ–º–º—É–Ω–∏–∫–∞—Ü–∏—è, —Ç–≤–æ—Ä—á–µ—Å—Ç–≤–æ, –≤—ã—Ä–∞–∂–µ–Ω–∏–µ —Å–µ–±—è.",
    4: "–°—Ç—Ä—É–∫—Ç—É—Ä–∞, –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–∞, –Ω–∞–¥—ë–∂–Ω–æ—Å—Ç—å.",
    5: "–°–≤–æ–±–æ–¥–∞, –ø–µ—Ä–µ–º–µ–Ω—ã, –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è, –≥–∏–±–∫–æ—Å—Ç—å.",
    6: "–ó–∞–±–æ—Ç–∞, —Å–µ–º—å—è, –∫—Ä–∞—Å–æ—Ç–∞, –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å.",
    7: "–ê–Ω–∞–ª–∏—Ç–∏–∫–∞, –¥—É—Ö–æ–≤–Ω–æ—Å—Ç—å, –≥–ª—É–±–æ–∫–∏–µ —Å–º—ã—Å–ª—ã.",
    8: "–ê–º–±–∏—Ü–∏–∏, —Ä–µ—Å—É—Ä—Å—ã, —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏ –≤–ª–∏—è–Ω–∏–µ.",
    9: "–°–ª—É–∂–µ–Ω–∏–µ, –≥—É–º–∞–Ω–∏–∑–º, –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ü–∏–∫–ª–æ–≤.",
    11: "–ú–∞—Å—Ç–µ—Ä-—á–∏—Å–ª–æ –∏–Ω—Ç—É–∏—Ü–∏–∏ –∏ –≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏—è.",
    22: "–ú–∞—Å—Ç–µ—Ä-—á–∏—Å–ª–æ —Å–æ–∑–∏–¥–∞—Ç–µ–ª—è –±–æ–ª—å—à–∏—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤.",
}

def calc_life_path_ddmmyyyy(date_str: str) -> int:
    digits = [int(ch) for ch in date_str if ch.isdigit()]
    s = sum(digits)
    def reduce(n: int) -> int:
        while n not in (11, 22) and n > 9:
            n = sum(int(c) for c in str(n))
        return n
    return reduce(s)


async def send_service_text(q, caption: str, buy_cbdata: str, buy_label: str):
    kb = InlineKeyboardMarkup([
        [InlineKeyboardButton(buy_label, callback_data=buy_cbdata)],
        [InlineKeyboardButton("‚Üê –ù–∞–∑–∞–¥", callback_data="back_home")],
    ])
    try:
        await q.edit_message_text(caption, reply_markup=kb, parse_mode="Markdown")
    except Exception:
        # –ï—Å–ª–∏ –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ–ª—å–∑—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å (–∏–ª–∏ –±—ã–ª–æ —Ñ–æ—Ç–æ), –æ—Ç–ø—Ä–∞–≤–∏–º –Ω–æ–≤—ã–º
        await q.message.chat.send_message(caption, reply_markup=kb, parse_mode="Markdown")

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –±–µ–∑ —Å–ª–æ–≤–∞ "–æ–ø–ª–∞—Ç–∏—Ç—å"
MENU = [
    [InlineKeyboardButton("üî¢ –ù—É–º–µ—Ä–æ–ª–æ–≥–∏—è", callback_data="num")],
    [InlineKeyboardButton("ü™¨ –•–∏—Ä–æ–º–∞–Ω—Ç–∏—è", callback_data="palm")],
    [InlineKeyboardButton("üåå –ù–∞—Ç–∞–ª—å–Ω–∞—è –∫–∞—Ä—Ç–∞ Pro", callback_data="natal")],
]

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    u = update.effective_user
    upsert_profile(u.id, u.full_name or "", u.username or "", (u.language_code or ""))
    intro = (
        "‚ú® –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ *AstroMagic* ‚ú®\n\n"
        "–ú—ã ‚Äî –∫–æ–º–∞–Ω–¥–∞ –ø—Ä–∞–∫—Ç–∏–∫—É—é—â–∏—Ö –∞—Å—Ç—Ä–æ–ª–æ–≥–æ–≤, –Ω—É–º–µ—Ä–æ–ª–æ–≥–æ–≤ –∏ –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª–µ–π —ç–∑–æ—Ç–µ—Ä–∏–∫–∏.\n"
        "–ù–∞—à–∞ —Ü–µ–ª—å ‚Äî —Å–¥–µ–ª–∞—Ç—å –≥–ª—É–±–æ–∫–∏–µ –∑–Ω–∞–Ω–∏—è –æ –∑–≤—ë–∑–¥–∞—Ö, —á–∏—Å–ª–∞—Ö –∏ –ª–∏–Ω–∏—è—Ö —Å—É–¥—å–±—ã –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ –∫–∞–∂–¥–æ–º—É.\n\n"
        "–ö–∞–∂–¥—ã–π —Ä–∞–∑–±–æ—Ä —Å–æ–∑–¥–∞—ë—Ç—Å—è —Å –≤–Ω–∏–º–∞–Ω–∏–µ–º –∫ –¥–µ—Ç–∞–ª—è–º, —Å –æ–ø–æ—Ä–æ–π –Ω–∞ –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–µ —à–∫–æ–ª—ã –∏ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–æ–¥—ã. "
        "–í—ã –ø–æ–ª—É—á–∞–µ—Ç–µ –Ω–µ –ø—Ä–æ—Å—Ç–æ —Å—É—Ö—É—é –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—é, –∞ –æ–±—Ä–∞–∑–Ω–æ–µ –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ —Ç–æ–≥–æ, —á—Ç–æ —Å–∫—Ä—ã—Ç–æ "
        "–≤ –≤–∞—à–µ–π –¥–∞—Ç–µ —Ä–æ–∂–¥–µ–Ω–∏—è, –Ω–∞—Ç–∞–ª—å–Ω–æ–π –∫–∞—Ä—Ç–µ –∏–ª–∏ –ª–∏–Ω–∏—è—Ö –ª–∞–¥–æ–Ω–∏.\n\n"
        "üîÆ –ß—Ç–æ –º—ã –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º:\n"
        "‚Ä¢ *–ù—É–º–µ—Ä–æ–ª–æ–≥–∏—è* ‚Äî –≤–∞—à —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–æ–¥ –ª–∏—á–Ω–æ—Å—Ç–∏ –∏ –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è.\n"
        "‚Ä¢ *–•–∏—Ä–æ–º–∞–Ω—Ç–∏—è* ‚Äî —á—Ç–µ–Ω–∏–µ –ª–∏–Ω–∏–π —Å—É–¥—å–±—ã –ø–æ —Ñ–æ—Ç–æ –ª–∞–¥–æ–Ω–∏.\n"
        "‚Ä¢ *–ù–∞—Ç–∞–ª—å–Ω–∞—è –∫–∞—Ä—Ç–∞ Pro* ‚Äî –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π —Ä–∞–∑–±–æ—Ä: –ø–ª–∞–Ω–µ—Ç—ã, –¥–æ–º–∞, –∞—Å–ø–µ–∫—Ç—ã + –Ω—É–º–µ—Ä–æ–ª–æ–≥–∏—è.\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∏–∂–µ, –∏ –º—ã –ø–æ–¥–≥–æ—Ç–æ–≤–∏–º –¥–ª—è –≤–∞—Å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —Ä–∞–∑–±–æ—Ä —Å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏."
    )
    if TEST_MODE:
        intro += "\n\n_–°–µ–π—á–∞—Å –≤–∫–ª—é—á—ë–Ω —Ç–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º: –æ–ø–ª–∞—Ç–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞, –¥–æ—Å—Ç—É–ø –≤—ã–¥–∞—ë—Ç—Å—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ–ª–æ—É._"
    await update.message.reply_text(intro, reply_markup=InlineKeyboardMarkup(MENU), parse_mode="Markdown")

async def menu_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    u = update.effective_user
    upsert_profile(u.id, u.full_name or "", u.username or "", (u.language_code or ""))
    intro = (
        "‚ú® –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ *AstroMagic* ‚ú®\n\n"
        "–ú—ã ‚Äî –∫–æ–º–∞–Ω–¥–∞ –ø—Ä–∞–∫—Ç–∏–∫—É—é—â–∏—Ö –∞—Å—Ç—Ä–æ–ª–æ–≥–æ–≤, –Ω—É–º–µ—Ä–æ–ª–æ–≥–æ–≤ –∏ –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª–µ–π —ç–∑–æ—Ç–µ—Ä–∏–∫–∏.\n"
        "–ù–∞—à–∞ —Ü–µ–ª—å ‚Äî —Å–¥–µ–ª–∞—Ç—å –≥–ª—É–±–æ–∫–∏–µ –∑–Ω–∞–Ω–∏—è –æ –∑–≤—ë–∑–¥–∞—Ö, —á–∏—Å–ª–∞—Ö –∏ –ª–∏–Ω–∏—è—Ö —Å—É–¥—å–±—ã –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ –∫–∞–∂–¥–æ–º—É.\n\n"
        "–ö–∞–∂–¥—ã–π —Ä–∞–∑–±–æ—Ä —Å–æ–∑–¥–∞—ë—Ç—Å—è —Å –≤–Ω–∏–º–∞–Ω–∏–µ–º –∫ –¥–µ—Ç–∞–ª—è–º, —Å –æ–ø–æ—Ä–æ–π –Ω–∞ –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–µ —à–∫–æ–ª—ã –∏ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–æ–¥—ã. "
        "–í—ã –ø–æ–ª—É—á–∞–µ—Ç–µ –Ω–µ –ø—Ä–æ—Å—Ç–æ —Å—É—Ö—É—é –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—é, –∞ –æ–±—Ä–∞–∑–Ω–æ–µ –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ —Ç–æ–≥–æ, —á—Ç–æ —Å–∫—Ä—ã—Ç–æ "
        "–≤ –≤–∞—à–µ–π –¥–∞—Ç–µ —Ä–æ–∂–¥–µ–Ω–∏—è, –Ω–∞—Ç–∞–ª—å–Ω–æ–π –∫–∞—Ä—Ç–µ –∏–ª–∏ –ª–∏–Ω–∏—è—Ö –ª–∞–¥–æ–Ω–∏.\n\n"
        "üîÆ –ß—Ç–æ –º—ã –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º:\n"
        "‚Ä¢ *–ù—É–º–µ—Ä–æ–ª–æ–≥–∏—è* ‚Äî –≤–∞—à —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–æ–¥ –ª–∏—á–Ω–æ—Å—Ç–∏ –∏ –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è.\n"
        "‚Ä¢ *–•–∏—Ä–æ–º–∞–Ω—Ç–∏—è* ‚Äî —á—Ç–µ–Ω–∏–µ –ª–∏–Ω–∏–π —Å—É–¥—å–±—ã –ø–æ —Ñ–æ—Ç–æ –ª–∞–¥–æ–Ω–∏.\n"
        "‚Ä¢ *–ù–∞—Ç–∞–ª—å–Ω–∞—è –∫–∞—Ä—Ç–∞ Pro* ‚Äî –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π —Ä–∞–∑–±–æ—Ä: –ø–ª–∞–Ω–µ—Ç—ã, –¥–æ–º–∞, –∞—Å–ø–µ–∫—Ç—ã + –Ω—É–º–µ—Ä–æ–ª–æ–≥–∏—è.\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∏–∂–µ, –∏ –º—ã –ø–æ–¥–≥–æ—Ç–æ–≤–∏–º –¥–ª—è –≤–∞—Å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —Ä–∞–∑–±–æ—Ä —Å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏."
    )
    if TEST_MODE:
        intro += "\n\n_–°–µ–π—á–∞—Å –≤–∫–ª—é—á—ë–Ω —Ç–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º: –æ–ø–ª–∞—Ç–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞, –¥–æ—Å—Ç—É–ø –≤—ã–¥–∞—ë—Ç—Å—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ–ª–æ—É._"
    await update.message.reply_text(intro, reply_markup=InlineKeyboardMarkup(MENU), parse_mode="Markdown")


# --- Whoami command handler ---
async def whoami(update: Update, context: ContextTypes.DEFAULT_TYPE):
    u = update.effective_user
    await update.message.reply_text(
        f"your id: {u.id}\nADMIN_ID: {ADMIN_ID} (type={type(ADMIN_ID).__name__})\nTEST_MODE: {TEST_MODE}")


# --- Admin command: show last orders ---
async def orders_last(update: Update, context: ContextTypes.DEFAULT_TYPE):
    u = update.effective_user
    try:
        admin_id_val = int(ADMIN_ID)
    except Exception:
        admin_id_val = 0
    if admin_id_val and int(u.id) != admin_id_val:
        await update.message.reply_text("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.")
        return

    # –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–≥–æ –∞—Ä–≥—É–º–µ–Ω—Ç–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞: /orders_last 10
    try:
        limit = int(context.args[0]) if context.args else 5
        limit = max(1, min(limit, 50))
    except Exception:
        limit = 5

    rows = fetch_last_orders(limit=limit)
    if not rows:
        await update.message.reply_text("–ü–æ–∫–∞ –∑–∞–∫–∞–∑–æ–≤ –Ω–µ—Ç.")
        return

    lines = ["–ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–∫–∞–∑—ã:"]
    for (oid, uid, payload, amount, status, charge, created) in rows:
        date = created.split('T')[0] if created else ""
        lines.append(f"‚Ä¢ #{oid} | user:{uid} | {payload} {amount}‚≠ê | {status} | {date}")
    await update.message.reply_text("\n".join(lines))

# –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –∏–Ω–≤–æ–π—Å–∞ –≤ Stars
async def send_stars_invoice(
    update_or_query, context: ContextTypes.DEFAULT_TYPE,
    title: str, desc: str, payload: str, amount_stars: int
):
    chat_id = (
        update_or_query.effective_chat.id
        if isinstance(update_or_query, Update)
        else update_or_query.message.chat.id
        if hasattr(update_or_query, "message")
        else update_or_query.from_user.id
    )
    prices = [LabeledPrice(label=title, amount=amount_stars)]  # –¥–ª—è XTR amount = –∫–æ–ª-–≤–æ –∑–≤—ë–∑–¥
    await context.bot.send_invoice(
        chat_id=chat_id,
        title=title,
        description=desc,
        payload=payload,           # –≤–µ—Ä–Ω—ë—Ç—Å—è –≤ successful_payment
        provider_token="",         # –¥–ª—è Telegram Stars –æ—Å—Ç–∞–≤–ª—è–µ–º –ø—É—Å—Ç—ã–º
        currency="XTR",            # –∫–ª—é—á–µ–≤–æ–π –º–æ–º–µ–Ω—Ç!
        prices=prices,
        start_parameter="buy",
        need_name=False,
        need_phone_number=False,
        need_email=False,
        need_shipping_address=False,
        is_flexible=False,
    )

async def on_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    await q.answer()
    if q.data == "num":
        caption_num = (
            "üî¢ *–ù—É–º–µ—Ä–æ–ª–æ–≥–∏—è*\n\n"
            "–ß–∏—Å–ª–∞ ‚Äî —ç—Ç–æ —è–∑—ã–∫, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º –í—Å–µ–ª–µ–Ω–Ω–∞—è —à–µ–ø—á–µ—Ç –æ –Ω–∞—à–∏—Ö –¥–∞—Ä–∞—Ö –∏ —É—Ä–æ–∫–∞—Ö. –Ø —Ä–∞—Å—Å—á–∏—Ç–∞—é –∫–ª—é—á–µ–≤—ã–µ —á–∏—Å–ª–∞ (—Å—É–¥—å–±—ã, –¥—É—à–∏, –ª–∏—á–Ω–æ—Å—Ç–∏, –∏–º–µ–Ω–∏) –∏ —Ä–∞–∑–ª–æ–∂—É –ø–æ –ø–æ–ª–æ—á–∫–∞–º: —Å–∏–ª—å–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã, –∑–æ–Ω—ã —Ä–æ—Å—Ç–∞ –∏ –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —à–∞–≥–∏.\n\n"
            "–ß—Ç–æ —Ç—ã –ø–æ–ª—É—á–∏—à—å:\n"
            "‚Ä¢ –ö—Ä–∞—Ç–∫–∏–π –ø–æ—Ä—Ç—Ä–µ—Ç –Ω–∞ 3‚Äì4 –∞–±–∑–∞—Ü–∞;\n"
            "‚Ä¢ –†–∞–∑–±–æ—Ä –∫–∞–∂–¥–æ–≥–æ —á–∏—Å–ª–∞;\n"
            "‚Ä¢ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –º–µ—Å—è—Ü.\n\n"
            "–°—Ç–æ–∏–º–æ—Å—Ç—å: *90 ‚≠ê* (‚âà 200 ‚ÇΩ)."
        )
        await send_service_text(q, caption_num, "buy_num", "–û–ø–ª–∞—Ç–∏—Ç—å 90 ‚≠ê")
    elif q.data == "palm":
        caption_palm = (
            "ü™¨ *–•–∏—Ä–æ–º–∞–Ω—Ç–∏—è*\n\n"
            "–õ–∞–¥–æ–Ω—å ‚Äî –∂–∏–≤–æ–π –¥–Ω–µ–≤–Ω–∏–∫ —Å—É–¥—å–±—ã. –ü–æ —Ñ–æ—Ç–æ –ø—Ä–∞–≤–æ–π —Ä—É–∫–∏ —è —Ä–∞—Å—Å–º–æ—Ç—Ä—é –ª–∏–Ω–∏–∏ —Å–µ—Ä–¥—Ü–∞, –≥–æ–ª–æ–≤—ã –∏ –∂–∏–∑–Ω–∏, —Ö–æ–ª–º—ã –∏ –æ–±—â–∏–π —Ä–∏—Å—É–Ω–æ–∫, —á—Ç–æ–±—ã –º—è–≥–∫–æ –ø–æ–¥—Å–≤–µ—Ç–∏—Ç—å —Ç–≤–æ–∏ —Ç–∞–ª–∞–Ω—Ç—ã –∏ —Ç–µ–∫—É—â–∏–µ –≤—ã–∑–æ–≤—ã.\n\n"
            "–ß—Ç–æ –Ω—É–∂–Ω–æ –æ—Ç —Ç–µ–±—è: –æ–¥–Ω–æ —á—ë—Ç–∫–æ–µ —Ñ–æ—Ç–æ –ª–∞–¥–æ–Ω–∏ –ø—Ä–∏ —Ö–æ—Ä–æ—à–µ–º —Å–≤–µ—Çe.\n\n"
            "–ß—Ç–æ —Ç—ã –ø–æ–ª—É—á–∏—à—å: –æ–±—Ä–∞–∑–Ω—ã–π —Ä–∞–∑–±–æ—Ä –Ω–∞ 3‚Äì5 –∞–±–∑–∞—Ü–µ–≤ + –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Å–æ–≤–µ—Ç—ã.\n\n"
            "–°—Ç–æ–∏–º–æ—Å—Ç—å: *130 ‚≠ê* (‚âà 300 ‚ÇΩ)."
        )
        await send_service_text(q, caption_palm, "buy_palm", "–û–ø–ª–∞—Ç–∏—Ç—å 130 ‚≠ê")
    elif q.data == "natal":
        caption_natal = (
            "üåå *–ù–∞—Ç–∞–ª—å–Ω–∞—è –∫–∞—Ä—Ç–∞ Pro*\n\n"
            "–¢–≤–æ–π –ª–∏—á–Ω—ã–π –Ω–µ–±–µ—Å–Ω—ã–π –∞—Ç–ª–∞—Å: –ø–ª–∞–Ω–µ—Ç—ã, –∑–Ω–∞–∫–∏, *–¥–æ–º–∞* –∏ –∫–ª—é—á–µ–≤—ã–µ *–∞—Å–ø–µ–∫—Ç—ã* + –Ω—É–º–µ—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π —à—Ç—Ä–∏—Ö-–∫–æ–¥. –û—Ç–¥–µ–ª—å–Ω–æ –æ—Ç–º–µ—á—É —Ä–µ—Å—É—Ä—Å—ã, —Ä–∏—Å–∫–∏ –∏ –º—è–≥–∫–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –±–ª–∏–∂–∞–π—à–∏–π —Ü–∏–∫–ª.\n\n"
            "–ß—Ç–æ –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è: –¥–∞—Ç–∞, –≥–æ—Ä–æ–¥ –∏ ‚Äî –ø–æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ ‚Äî —Ç–æ—á–Ω–æ–µ –≤—Ä–µ–º—è —Ä–æ–∂–¥–µ–Ω–∏—è.\n\n"
            "–†–µ–∑—É–ª—å—Ç–∞—Ç: —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç 6‚Äì10 –∞–±–∑–∞—Ü–µ–≤.\n\n"
            "–°—Ç–æ–∏–º–æ—Å—Ç—å: *220 ‚≠ê* (‚âà 500 ‚ÇΩ)."
        )
        await send_service_text(q, caption_natal, "buy_natal", "–û–ø–ª–∞—Ç–∏—Ç—å 220 ‚≠ê")
    elif q.data == "back_home":
        try:
            await q.message.delete()
        except Exception:
            pass
        intro = (
            "‚ú® –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ *AstroMagic* ‚ú®\n\n"
            "–ú—ã ‚Äî –∫–æ–º–∞–Ω–¥–∞ –ø—Ä–∞–∫—Ç–∏–∫—É—é—â–∏—Ö –∞—Å—Ç—Ä–æ–ª–æ–≥–æ–≤, –Ω—É–º–µ—Ä–æ–ª–æ–≥–æ–≤ –∏ –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª–µ–π —ç–∑–æ—Ç–µ—Ä–∏–∫–∏.\n"
            "–ù–∞—à–∞ —Ü–µ–ª—å ‚Äî —Å–¥–µ–ª–∞—Ç—å –≥–ª—É–±–æ–∫–∏–µ –∑–Ω–∞–Ω–∏—è –æ –∑–≤—ë–∑–¥–∞—Ö, —á–∏—Å–ª–∞—Ö –∏ –ª–∏–Ω–∏—è—Ö —Å—É–¥—å–±—ã –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ –∫–∞–∂–¥–æ–º—É.\n\n"
            "–ö–∞–∂–¥—ã–π —Ä–∞–∑–±–æ—Ä —Å–æ–∑–¥–∞—ë—Ç—Å—è —Å –≤–Ω–∏–º–∞–Ω–∏–µ–º –∫ –¥–µ—Ç–∞–ª—è–º, —Å –æ–ø–æ—Ä–æ–π –Ω–∞ –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–µ —à–∫–æ–ª—ã –∏ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–æ–¥—ã. "
            "–í—ã –ø–æ–ª—É—á–∞–µ—Ç–µ –Ω–µ –ø—Ä–æ—Å—Ç–æ —Å—É—Ö—É—é –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—é, –∞ –æ–±—Ä–∞–∑–Ω–æ–µ –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ —Ç–æ–≥–æ, —á—Ç–æ —Å–∫—Ä—ã—Ç–æ "
            "–≤ –≤–∞—à–µ–π –¥–∞—Ç–µ —Ä–æ–∂–¥–µ–Ω–∏—è, –Ω–∞—Ç–∞–ª—å–Ω–æ–π –∫–∞—Ä—Ç–µ –∏–ª–∏ –ª–∏–Ω–∏—è—Ö –ª–∞–¥–æ–Ω–∏.\n\n"
            "üîÆ –ß—Ç–æ –º—ã –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º:\n"
            "‚Ä¢ *–ù—É–º–µ—Ä–æ–ª–æ–≥–∏—è* ‚Äî –≤–∞—à —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–æ–¥ –ª–∏—á–Ω–æ—Å—Ç–∏ –∏ –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è.\n"
            "‚Ä¢ *–•–∏—Ä–æ–º–∞–Ω—Ç–∏—è* ‚Äî —á—Ç–µ–Ω–∏–µ –ª–∏–Ω–∏–π —Å—É–¥—å–±—ã –ø–æ —Ñ–æ—Ç–æ –ª–∞–¥–æ–Ω–∏.\n"
            "‚Ä¢ *–ù–∞—Ç–∞–ª—å–Ω–∞—è –∫–∞—Ä—Ç–∞ Pro* ‚Äî –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π —Ä–∞–∑–±–æ—Ä: –ø–ª–∞–Ω–µ—Ç—ã, –¥–æ–º–∞, –∞—Å–ø–µ–∫—Ç—ã + –Ω—É–º–µ—Ä–æ–ª–æ–≥–∏—è.\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∏–∂–µ, –∏ –º—ã –ø–æ–¥–≥–æ—Ç–æ–≤–∏–º –¥–ª—è –≤–∞—Å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —Ä–∞–∑–±–æ—Ä —Å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏."
        )
        if TEST_MODE:
            intro += "\n\n_–°–µ–π—á–∞—Å –≤–∫–ª—é—á—ë–Ω —Ç–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º: –æ–ø–ª–∞—Ç–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞, –¥–æ—Å—Ç—É–ø –≤—ã–¥–∞—ë—Ç—Å—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ–ª–æ—É._"
        await q.message.chat.send_message(
            intro,
            reply_markup=InlineKeyboardMarkup(MENU),
            parse_mode="Markdown",
        )
    elif q.data == "buy_num":
        if TEST_MODE:
            await _begin_flow_after_payment("NUM_200", update, context)
        else:
            await send_stars_invoice(
                q, context,
                "–ù—É–º–µ—Ä–æ–ª–æ–≥–∏—è",
                "–ö—Ä–∞—Ç–∫–∏–π –Ω—É–º–µ—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π —Ä–∞–∑–±–æ—Ä (‚âà 200 ‚ÇΩ).",
                "NUM_200", PRICE_NUM
            )
    elif q.data == "buy_palm":
        if TEST_MODE:
            await _begin_flow_after_payment("PALM_300", update, context)
        else:
            await send_stars_invoice(
                q, context,
                "–•–∏—Ä–æ–º–∞–Ω—Ç–∏—è",
                "–†–∞–∑–±–æ—Ä –ø–æ —Ñ–æ—Ç–æ –ª–∞–¥–æ–Ω–∏ (‚âà 300 ‚ÇΩ).",
                "PALM_300", PRICE_PALM
            )
    elif q.data == "buy_natal":
        if TEST_MODE:
            await _begin_flow_after_payment("NATAL_500", update, context)
        else:
            await send_stars_invoice(
                q, context,
                "–ù–∞—Ç–∞–ª—å–Ω–∞—è –∫–∞—Ä—Ç–∞ Pro",
                "–ù–∞—Ç–∞–ª—å–Ω–∞—è –∫–∞—Ä—Ç–∞ + –¥–æ–º–∞ + –∞—Å–ø–µ–∫—Ç—ã + –Ω—É–º–µ—Ä–æ–ª–æ–≥–∏—è (‚âà 500 ‚ÇΩ).",
                "NATAL_500", PRICE_NATAL
            )
    else:
        await q.edit_message_text("–í—ã–±–∏—Ä–∞–π —É—Å–ª—É–≥—É ‚§¥Ô∏è")

# –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π pre-checkout (–∑–¥–µ—Å—å –º–æ–∂–Ω–æ –≤—Å—Ç–∞–≤–∏—Ç—å –≤–∞–ª–∏–¥–∞—Ü–∏–∏)
async def precheckout_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.pre_checkout_query.answer(ok=True)

async def _begin_flow_after_payment(payload: str, update: Update, context: ContextTypes.DEFAULT_TYPE, charge_id: str | None = None):
    """Starts the appropriate dialog flow as if payment succeeded, and creates an order."""
    u = update.effective_user
    amount = AMOUNT_BY_PAYLOAD.get(payload, 0)
    order_id = create_order(u.id, payload, amount, status="awaiting_input", charge_id=charge_id)
    ud = context.user_data
    ud.clear()
    ud["order_id"] = order_id

    # –ù–∞—Ç–∞–ª–∫–∞ PRO
    if payload == "NATAL_500":
        ud["flow"] = "natal"; ud["state"] = NATAL_DATE
        await update.effective_chat.send_message(
            "–û–ø–ª–∞—Ç–∞ –ø–æ–ª—É—á–µ–Ω–∞ ‚úÖ\n\n–î–∞–≤–∞–π –Ω–∞—á–Ω—ë–º —Ä–∞–∑–±–æ—Ä.\n"
            "1) –ù–∞–ø–∏—à–∏ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì\n\n"
            "–ü—Ä–∏–º–µ—Ä: 21.09.1999"
        )
        return

    # –•–∏—Ä–æ–º–∞–Ω—Ç–∏—è
    if payload == "PALM_300":
        ud["flow"] = "palm"; ud["state"] = PALM_PHOTO
        await update.effective_chat.send_message(
            "–û–ø–ª–∞—Ç–∞ –ø–æ–ª—É—á–µ–Ω–∞ ‚úÖ\n\n–ü—Ä–∏—à–ª–∏ *–æ–¥–Ω–æ —á—ë—Ç–∫–æ–µ —Ñ–æ—Ç–æ –ø—Ä–∞–≤–æ–π –ª–∞–¥–æ–Ω–∏* –ø—Ä–∏ —Ö–æ—Ä–æ—à–µ–º –æ—Å–≤–µ—â–µ–Ω–∏–∏.",
            parse_mode="Markdown",
        )
        return

    # –ù—É–º–µ—Ä–æ–ª–æ–≥–∏—è
    if payload == "NUM_200":
        ud["flow"] = "num"; ud["state"] = NUM_INPUT
        await update.effective_chat.send_message(
            "–û–ø–ª–∞—Ç–∞ –ø–æ–ª—É—á–µ–Ω–∞ ‚úÖ\n\n–ù–∞–ø–∏—à–∏ *–¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –∏ –§–ò–û –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–æ–π* –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
            "`–î–î.–ú–ú.–ì–ì–ì–ì –ò–º—è –§–∞–º–∏–ª–∏—è`\n\n–ù–∞–ø—Ä–∏–º–µ—Ä: `21.09.1999 –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤`",
            parse_mode="Markdown",
        )
        return

    await update.effective_chat.send_message("–û–ø–ª–∞—Ç–∞ –ø–æ–ª—É—á–µ–Ω–∞ ‚úÖ")

async def successful_payment_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    sp = update.message.successful_payment
    payload = sp.invoice_payload
    charge_id = sp.telegram_payment_charge_id
    log.info(f"Payment ok: payload={payload}, charge_id={charge_id}, amount={sp.total_amount} XTR")
    await _begin_flow_after_payment(payload, update, context, charge_id=charge_id)

async def text_router(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = (update.message.text or "").strip()
    ud = context.user_data
    flow = ud.get("flow"); state = ud.get("state")
    if not flow:
        return

    # ---------- –ù–∞—Ç–∞–ª–∫–∞ ----------
    if flow == "natal":
        if state == NATAL_DATE:
            if not re.fullmatch(r"\d{2}\.\d{2}\.\d{4}", text):
                await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì. –ù–∞–ø—Ä–∏–º–µ—Ä: 07.03.1995")
                return
            try:
                _ = datetime.strptime(text, "%d.%m.%Y")
            except ValueError:
                await update.message.reply_text("–ü–æ—Ö–æ–∂–µ, –¥–∞—Ç–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞. –ü—Ä–æ–≤–µ—Ä—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏ –ø—Ä–∏—à–ª–∏ –µ—â—ë —Ä–∞–∑.")
                return
            ud["natal_date"] = text
            ud["state"] = NATAL_TIME
            await update.message.reply_text(
                "–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏ *–≤—Ä–µ–º—è —Ä–æ–∂–¥–µ–Ω–∏—è* –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú.\n"
                "–ï—Å–ª–∏ –Ω–µ –∑–Ω–∞–µ—à—å —Ç–æ—á–Ω–æ–µ –≤—Ä–µ–º—è ‚Äî –Ω–∞–ø–∏—à–∏ ‚Äò–Ω–µ –∑–Ω–∞—é‚Äô.",
                parse_mode="Markdown",
            )
            return

        if state == NATAL_TIME:
            low = text.lower()
            if low in ("–Ω–µ –∑–Ω–∞—é", "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ", "–Ω–µ—Ç", "-"):
                ud["natal_time"] = None
            else:
                if not re.fullmatch(r"\d{1,2}:\d{2}", text):
                    await update.message.reply_text("–í—Ä–µ–º—è —É–∫–∞–∂–∏ —Ç–∞–∫: –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 14:25) –∏–ª–∏ –Ω–∞–ø–∏—à–∏ ‚Äò–Ω–µ –∑–Ω–∞—é‚Äô.")
                    return
                hh, mm = map(int, text.split(":"))
                if not (0 <= hh <= 23 and 0 <= mm <= 59):
                    await update.message.reply_text("–ü—Ä–æ–≤–µ—Ä—å —á–∞—Å—ã –∏ –º–∏–Ω—É—Ç—ã (0‚Äì23 –∏ 0‚Äì59). –ü—Ä–∏—à–ª–∏ –≤—Ä–µ–º—è –µ—â—ë —Ä–∞–∑.")
                    return
                ud["natal_time"] = f"{hh:02d}:{mm:02d}"
            ud["state"] = NATAL_CITY
            await update.message.reply_text(
                "–ò –ø–æ—Å–ª–µ–¥–Ω–∏–π —à–∞–≥: *–≥–æ—Ä–æ–¥ —Ä–æ–∂–¥–µ–Ω–∏—è* (–º–æ–∂–Ω–æ —Å–æ —Å—Ç—Ä–∞–Ω–æ–π/–æ–±–ª–∞—Å—Ç—å—é –¥–ª—è —Ç–æ—á–Ω–æ—Å—Ç–∏).\n"
                "–ù–∞–ø—Ä–∏–º–µ—Ä: ‚Äò–û–º—Å–∫, –†–æ—Å—Å–∏—è‚Äô –∏–ª–∏ ‚ÄòAlmaty, Kazakhstan‚Äô.",
                parse_mode="Markdown",
            )
            return

        if state == NATAL_CITY:
            if len(text) < 2:
                await update.message.reply_text("–ù—É–∂–Ω–æ –Ω–∞–∑–≤–∞—Ç—å –Ω–∞—Å–µ–ª—ë–Ω–Ω—ã–π –ø—É–Ω–∫—Ç. –ü—Ä–∏—à–ª–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –µ—â—ë —Ä–∞–∑.")
                return
            ud["natal_city"] = text

            # –ó–∞–∫—Ä—ã–≤–∞–µ–º –∑–∞–∫–∞–∑: —Å—Ç–∞—Ç—É—Å done + –º–µ—Ç–∞
            order_id = ud.get("order_id")
            if order_id:
                update_order(order_id, status="done", meta_merge={
                    "natal_date": ud.get("natal_date"),
                    "natal_time": ud.get("natal_time"),
                    "natal_city": ud.get("natal_city"),
                })

            ud["flow"] = None; ud["state"] = None
            await update.message.reply_text(
                "–°–ø–∞—Å–∏–±–æ! –Ø –∑–∞–ø–∏—Å–∞–ª –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ù–∞—Ç–∞–ª–∫–∏ PRO:\n\n"
                f"‚Ä¢ –î–∞—Ç–∞: *{ud.get('natal_date')}*\n"
                f"‚Ä¢ –í—Ä–µ–º—è: *{ud.get('natal_time') or '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}*\n"
                f"‚Ä¢ –ì–æ—Ä–æ–¥: *{ud.get('natal_city')}*\n\n"
                "–ù–∞ —Å–ª–µ–¥—É—é—â–µ–º —à–∞–≥–µ –ø–æ–¥–∫–ª—é—á–∏–º —Ç–æ—á–Ω—ã–µ —Ä–∞—Å—á—ë—Ç—ã –∏ –ø—Ä–∏—à–ª—ë–º —Ä–∞–∑–±–æ—Ä.",
                parse_mode="Markdown",
            )
            return

    # ---------- –ù—É–º–µ—Ä–æ–ª–æ–≥–∏—è ----------
    if flow == "num" and state == NUM_INPUT:
        parts = text.split(maxsplit=1)
        if len(parts) < 2 or not re.fullmatch(r"\d{2}\.\d{2}\.\d{4}", parts[0]):
            await update.message.reply_text(
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏: `–î–î.–ú–ú.–ì–ì–ì–ì –ò–º—è –§–∞–º–∏–ª–∏—è`.\n–ù–∞–ø—Ä–∏–º–µ—Ä: `07.03.1995 –ê–Ω–Ω–∞ –ü–µ—Ç—Ä–æ–≤–∞`",
                parse_mode="Markdown",
            )
            return
        dob_str, full_name = parts[0], parts[1]
        try:
            _ = datetime.strptime(dob_str, "%d.%m.%Y")
        except ValueError:
            await update.message.reply_text("–î–∞—Ç–∞ –≤—ã–≥–ª—è–¥–∏—Ç –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ. –ü—Ä–æ–≤–µ—Ä—å –∏ –ø—Ä–∏—à–ª–∏ –µ—â—ë —Ä–∞–∑.")
            return

        life_path = calc_life_path_ddmmyyyy(dob_str)
        meaning = NUM_DESCRIPTIONS.get(life_path, "–õ–∏—á–Ω—ã–π –ø—É—Ç—å –∏ –æ–ø—ã—Ç —á–µ—Ä–µ–∑ —á–∏—Å–ª–æ —Å—É–¥—å–±—ã.")

        order_id = ud.get("order_id")
        if order_id:
            update_order(order_id, status="done", meta_merge={
                "num_dob": dob_str,
                "num_name": full_name,
                "life_path": life_path,
            })

        ud["flow"] = None; ud["state"] = None
        await update.message.reply_text(
            "**–ù—É–º–µ—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π —ç–∫—Å–ø—Ä–µ—Å—Å-—Ä–∞–∑–±–æ—Ä**\n\n"
            f"‚Ä¢ –ò–º—è: *{full_name}*\n"
            f"‚Ä¢ –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: *{dob_str}*\n"
            f"‚Ä¢ –ß–∏—Å–ª–æ —Å—É–¥—å–±—ã: *{life_path}* ‚Äî {meaning}\n\n"
            "–≠—Ç–æ –∫—Ä–∞—Ç–∫–∞—è –≤–µ—Ä—Å–∏—è. –ü–æ–ª–Ω—ã–π —Ä–∞–∑–±–æ—Ä —Å –º–∞—Ç—Ä–∏—Ü–µ–π, –∫–æ–¥–∞–º–∏ –∑–∞–¥–∞—á –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏ –¥–æ–±–∞–≤–∏–º –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.",
            parse_mode="Markdown",
        )
        return

# --- Photo router for palmistry ---
async def photo_router(update: Update, context: ContextTypes.DEFAULT_TYPE):
    ud = context.user_data
    if ud.get("flow") != "palm" or ud.get("state") != PALM_PHOTO:
        return
    photos = update.message.photo or []
    if not photos:
        return
    file_id = photos[-1].file_id

    order_id = ud.get("order_id")
    if order_id:
        update_order(order_id, status="done", meta_merge={"palm_photo_file_id": file_id})

    ud["flow"] = None; ud["state"] = None
    await update.message.reply_text("–§–æ—Ç–æ –ø–æ–ª—É—á–µ–Ω–æ ‚úÖ\n\n–°–∫–æ—Ä–æ –ø–æ–¥–≥–æ—Ç–æ–≤–∏–º —Ä–∞–∑–±–æ—Ä –ø–æ –ª–∏–Ω–∏—è–º –ª–∞–¥–æ–Ω–∏.")

def main():
    if not BOT_TOKEN:
        raise RuntimeError("–ù–µ –Ω–∞–π–¥–µ–Ω BOT_TOKEN –≤ –æ–∫—Ä—É–∂–µ–Ω–∏–∏. –î–æ–±–∞–≤—å –µ–≥–æ –≤ .env –∏–ª–∏ Railway Variables.")

    init_db()

    app = Application.builder().token(BOT_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("menu", menu_cmd))
    app.add_handler(CommandHandler("whoami", whoami))
    app.add_handler(CommandHandler("orders_last", orders_last))
    app.add_handler(CallbackQueryHandler(on_menu))
    app.add_handler(PreCheckoutQueryHandler(precheckout_handler))
    app.add_handler(MessageHandler(filters.SUCCESSFUL_PAYMENT, successful_payment_handler))
    app.add_handler(MessageHandler(filters.PHOTO, photo_router))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, text_router))

    log.info("Bot is starting with long polling...")
    app.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == "__main__":
    main()