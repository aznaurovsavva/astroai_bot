import logging
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton, LabeledPrice
from telegram.ext import (
    Application, CommandHandler, CallbackQueryHandler,
    ContextTypes, PreCheckoutQueryHandler, MessageHandler, filters
)
from .config import BOT_TOKEN

logging.basicConfig(
    format="%(asctime)s [%(levelname)s] %(name)s: %(message)s",
    level=logging.INFO,
)
log = logging.getLogger("astro-num-bot")

# --- –¶–µ–Ω—ã –≤ Stars (XTR). –≠–∫–≤–∏–≤–∞–ª–µ–Ω—Ç—ã –≤ —Ç–µ–∫—Å—Ç–µ –æ–ø–∏—Å–∞–Ω–∏—è. ---
PRICE_NUM   = 90   # ~200 ‚ÇΩ
PRICE_PALM  = 130   # ~300 ‚ÇΩ
PRICE_NATAL = 220   # ~500 ‚ÇΩ

IMG_NUM = "https://source.unsplash.com/featured/1200x800/?numbers,geometry"
IMG_PALM = "https://source.unsplash.com/featured/1200x800/?palm,hand"
IMG_NATAL = "https://source.unsplash.com/featured/1200x800/?night,stars,astrology"

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –±–µ–∑ —Å–ª–æ–≤–∞ "–æ–ø–ª–∞—Ç–∏—Ç—å"
MENU = [
    [InlineKeyboardButton("üî¢ –ù—É–º–µ—Ä–æ–ª–æ–≥–∏—è", callback_data="num")],
    [InlineKeyboardButton("ü™¨ –•–∏—Ä–æ–º–∞–Ω—Ç–∏—è", callback_data="palm")],
    [InlineKeyboardButton("üåå –ù–∞—Ç–∞–ª–∫–∞ PRO", callback_data="natal")],
]

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    intro = (
        "‚ú® –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ *AstroAi* ‚ú®\n\n"
        "–Ø ‚Äî —Ç–≤–æ–π –ø—Ä–æ–≤–æ–¥–Ω–∏–∫ –≤ –º–∏—Ä –∑–≤—ë–∑–¥, —á–∏—Å–µ–ª –∏ –ª–∏–Ω–∏–π —Å—É–¥—å–±—ã. –ó–¥–µ—Å—å –≤—Å—ë –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø—Ä–æ—Å—Ç–æ: –≤—ã–±–∏—Ä–∞–µ—à—å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ ‚Äî –∏ —è —Å–æ–±–∏—Ä–∞—é –¥–ª—è —Ç–µ–±—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —Ä–∞–∑–±–æ—Ä.\n\n"
        "–ß—Ç–æ –¥–æ—Å—Ç—É–ø–Ω–æ —Å–µ–π—á–∞—Å:\n"
        "‚Ä¢ üî¢ *–ù—É–º–µ—Ä–æ–ª–æ–≥–∏—è* ‚Äî –∫–æ–¥ —Ç–≤–æ–µ–π –ª–∏—á–Ω–æ—Å—Ç–∏ –∏ –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –ø–æ –¥–∞—Ç–µ –∏ –∏–º–µ–Ω–∏.\n"
        "‚Ä¢ ü™¨ *–•–∏—Ä–æ–º–∞–Ω—Ç–∏—è* ‚Äî —Ä–∞–∑–±–æ—Ä –ø–æ —Ñ–æ—Ç–æ –ª–∞–¥–æ–Ω–∏: —Ç–∞–ª–∞–Ω—Ç—ã, —Ä–∏—Å–∫–∏, –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ —Ü–∏–∫–ª—ã.\n"
        "‚Ä¢ üåå *–ù–∞—Ç–∞–ª–∫–∞ PRO* ‚Äî –ø–ª–∞–Ω–µ—Ç—ã, –¥–æ–º–∞, –∞—Å–ø–µ–∫—Ç—ã + –Ω—É–º–µ—Ä–æ–ª–æ–≥–∏—è –≤ –æ–¥–Ω–æ–º –ø–æ—Ä—Ç—Ä–µ—Ç–µ.\n\n"
        "–í—ã–±–µ—Ä–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∏–∂–µ ‚Äî —Ä–∞—Å—Å–∫–∞–∂—É –ø–æ–¥—Ä–æ–±–Ω–µ–µ –∏ –ø—Ä–µ–¥–ª–æ–∂—É –æ—Ñ–æ—Ä–º–∏—Ç—å –¥–æ—Å—Ç—É–ø."
    )
    await update.message.reply_text(intro, reply_markup=InlineKeyboardMarkup(MENU), parse_mode="Markdown")

async def menu_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    intro = (
        "‚ú® –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ *AstroAi* ‚ú®\n\n"
        "–Ø ‚Äî —Ç–≤–æ–π –ø—Ä–æ–≤–æ–¥–Ω–∏–∫ –≤ –º–∏—Ä –∑–≤—ë–∑–¥, —á–∏—Å–µ–ª –∏ –ª–∏–Ω–∏–π —Å—É–¥—å–±—ã. –ó–¥–µ—Å—å –≤—Å—ë –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø—Ä–æ—Å—Ç–æ: –≤—ã–±–∏—Ä–∞–µ—à—å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ ‚Äî –∏ —è —Å–æ–±–∏—Ä–∞—é –¥–ª—è —Ç–µ–±—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —Ä–∞–∑–±–æ—Ä.\n\n"
        "–ß—Ç–æ –¥–æ—Å—Ç—É–ø–Ω–æ —Å–µ–π—á–∞—Å:\n"
        "‚Ä¢ üî¢ *–ù—É–º–µ—Ä–æ–ª–æ–≥–∏—è* ‚Äî –∫–æ–¥ —Ç–≤–æ–µ–π –ª–∏—á–Ω–æ—Å—Ç–∏ –∏ –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –ø–æ –¥–∞—Ç–µ –∏ –∏–º–µ–Ω–∏.\n"
        "‚Ä¢ ü™¨ *–•–∏—Ä–æ–º–∞–Ω—Ç–∏—è* ‚Äî —Ä–∞–∑–±–æ—Ä –ø–æ —Ñ–æ—Ç–æ –ª–∞–¥–æ–Ω–∏: —Ç–∞–ª–∞–Ω—Ç—ã, —Ä–∏—Å–∫–∏, –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ —Ü–∏–∫–ª—ã.\n"
        "‚Ä¢ üåå *–ù–∞—Ç–∞–ª–∫–∞ PRO* ‚Äî –ø–ª–∞–Ω–µ—Ç—ã, –¥–æ–º–∞, –∞—Å–ø–µ–∫—Ç—ã + –Ω—É–º–µ—Ä–æ–ª–æ–≥–∏—è –≤ –æ–¥–Ω–æ–º –ø–æ—Ä—Ç—Ä–µ—Ç–µ.\n\n"
        "–í—ã–±–µ—Ä–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∏–∂–µ ‚Äî —Ä–∞—Å—Å–∫–∞–∂—É –ø–æ–¥—Ä–æ–±–Ω–µ–µ –∏ –ø—Ä–µ–¥–ª–æ–∂—É –æ—Ñ–æ—Ä–º–∏—Ç—å –¥–æ—Å—Ç—É–ø."
    )
    await update.message.reply_text(intro, reply_markup=InlineKeyboardMarkup(MENU), parse_mode="Markdown")

# –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –∏–Ω–≤–æ–π—Å–∞ –≤ Stars
async def send_stars_invoice(
    update_or_query, context: ContextTypes.DEFAULT_TYPE,
    title: str, desc: str, payload: str, amount_stars: int
):
    chat_id = (
        update_or_query.effective_chat.id
        if isinstance(update_or_query, Update)
        else update_or_query.message.chat.id
        if hasattr(update_or_query, "message")
        else update_or_query.from_user.id
    )
    prices = [LabeledPrice(label=title, amount=amount_stars)]  # –¥–ª—è XTR amount = –∫–æ–ª-–≤–æ –∑–≤—ë–∑–¥
    await context.bot.send_invoice(
        chat_id=chat_id,
        title=title,
        description=desc,
        payload=payload,           # –≤–µ—Ä–Ω—ë—Ç—Å—è –≤ successful_payment
        provider_token="",         # –¥–ª—è Telegram Stars –æ—Å—Ç–∞–≤–ª—è–µ–º –ø—É—Å—Ç—ã–º
        currency="XTR",            # –∫–ª—é—á–µ–≤–æ–π –º–æ–º–µ–Ω—Ç!
        prices=prices,
        start_parameter="buy",
        need_name=False,
        need_phone_number=False,
        need_email=False,
        need_shipping_address=False,
        is_flexible=False,
    )

async def on_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    await q.answer()
    if q.data == "num":
        caption_num = (
            "üî¢ *–ù—É–º–µ—Ä–æ–ª–æ–≥–∏—è*\n\n"
            "–ß–∏—Å–ª–∞ ‚Äî —ç—Ç–æ —è–∑—ã–∫, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º –í—Å–µ–ª–µ–Ω–Ω–∞—è —à–µ–ø—á–µ—Ç –æ –Ω–∞—à–∏—Ö –¥–∞—Ä–∞—Ö –∏ —É—Ä–æ–∫–∞—Ö. –Ø —Ä–∞—Å—Å—á–∏—Ç–∞—é –∫–ª—é—á–µ–≤—ã–µ —á–∏—Å–ª–∞ (—Å—É–¥—å–±—ã, –¥—É—à–∏, –ª–∏—á–Ω–æ—Å—Ç–∏, –∏–º–µ–Ω–∏) –∏ —Ä–∞–∑–ª–æ–∂—É –ø–æ –ø–æ–ª–æ—á–∫–∞–º: —Å–∏–ª—å–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã, –∑–æ–Ω—ã —Ä–æ—Å—Ç–∞ –∏ –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —à–∞–≥–∏.\n\n"
            "–ß—Ç–æ —Ç—ã –ø–æ–ª—É—á–∏—à—å:\n"
            "‚Ä¢ –ö—Ä–∞—Ç–∫–∏–π –ø–æ—Ä—Ç—Ä–µ—Ç –Ω–∞ 3‚Äì4 –∞–±–∑–∞—Ü–∞;\n"
            "‚Ä¢ –†–∞–∑–±–æ—Ä –∫–∞–∂–¥–æ–≥–æ —á–∏—Å–ª–∞;\n"
            "‚Ä¢ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –º–µ—Å—è—Ü.\n\n"
            "–°—Ç–æ–∏–º–æ—Å—Ç—å: *90 ‚≠ê* (‚âà 200 ‚ÇΩ)."
        )
        await q.message.reply_photo(
            photo=IMG_NUM,
            caption=caption_num,
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("–û–ø–ª–∞—Ç–∏—Ç—å 90 ‚≠ê", callback_data="buy_num")],
                [InlineKeyboardButton("‚Üê –ù–∞–∑–∞–¥", callback_data="back_home")],
            ]),
            parse_mode="Markdown",
        )
    elif q.data == "palm":
        caption_palm = (
            "ü™¨ *–•–∏—Ä–æ–º–∞–Ω—Ç–∏—è*\n\n"
            "–õ–∞–¥–æ–Ω—å ‚Äî –∂–∏–≤–æ–π –¥–Ω–µ–≤–Ω–∏–∫ —Å—É–¥—å–±—ã. –ü–æ —Ñ–æ—Ç–æ –ø—Ä–∞–≤–æ–π —Ä—É–∫–∏ —è —Ä–∞—Å—Å–º–æ—Ç—Ä—é –ª–∏–Ω–∏–∏ —Å–µ—Ä–¥—Ü–∞, –≥–æ–ª–æ–≤—ã –∏ –∂–∏–∑–Ω–∏, —Ö–æ–ª–º—ã –∏ –æ–±—â–∏–π —Ä–∏—Å—É–Ω–æ–∫, —á—Ç–æ–±—ã –º—è–≥–∫–æ –ø–æ–¥—Å–≤–µ—Ç–∏—Ç—å —Ç–≤–æ–∏ —Ç–∞–ª–∞–Ω—Ç—ã –∏ —Ç–µ–∫—É—â–∏–µ –≤—ã–∑–æ–≤—ã.\n\n"
            "–ß—Ç–æ –Ω—É–∂–Ω–æ –æ—Ç —Ç–µ–±—è: –æ–¥–Ω–æ —á—ë—Ç–∫–æ–µ —Ñ–æ—Ç–æ –ª–∞–¥–æ–Ω–∏ –ø—Ä–∏ —Ö–æ—Ä–æ—à–µ–º —Å–≤–µ—Çe.\n\n"
            "–ß—Ç–æ —Ç—ã –ø–æ–ª—É—á–∏—à—å: –æ–±—Ä–∞–∑–Ω—ã–π —Ä–∞–∑–±–æ—Ä –Ω–∞ 3‚Äì5 –∞–±–∑–∞—Ü–µ–≤ + –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Å–æ–≤–µ—Ç—ã.\n\n"
            "–°—Ç–æ–∏–º–æ—Å—Ç—å: *130 ‚≠ê* (‚âà 300 ‚ÇΩ)."
        )
        await q.message.reply_photo(
            photo=IMG_PALM,
            caption=caption_palm,
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("–û–ø–ª–∞—Ç–∏—Ç—å 130 ‚≠ê", callback_data="buy_palm")],
                [InlineKeyboardButton("‚Üê –ù–∞–∑–∞–¥", callback_data="back_home")],
            ]),
            parse_mode="Markdown",
        )
    elif q.data == "natal":
        caption_natal = (
            "üåå *–ù–∞—Ç–∞–ª–∫–∞ PRO*\n\n"
            "–¢–≤–æ–π –ª–∏—á–Ω—ã–π –Ω–µ–±–µ—Å–Ω—ã–π –∞—Ç–ª–∞—Å: –ø–ª–∞–Ω–µ—Ç—ã, –∑–Ω–∞–∫–∏, *–¥–æ–º–∞* –∏ –∫–ª—é—á–µ–≤—ã–µ *–∞—Å–ø–µ–∫—Ç—ã* + –Ω—É–º–µ—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π —à—Ç—Ä–∏—Ö-–∫–æ–¥. –û—Ç–¥–µ–ª—å–Ω–æ –æ—Ç–º–µ—á—É —Ä–µ—Å—É—Ä—Å—ã, —Ä–∏—Å–∫–∏ –∏ –º—è–≥–∫–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –±–ª–∏–∂–∞–π—à–∏–π —Ü–∏–∫–ª.\n\n"
            "–ß—Ç–æ –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è: –¥–∞—Ç–∞, –≥–æ—Ä–æ–¥ –∏ ‚Äî –ø–æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ ‚Äî —Ç–æ—á–Ω–æ–µ –≤—Ä–µ–º—è —Ä–æ–∂–¥–µ–Ω–∏—è.\n\n"
            "–†–µ–∑—É–ª—å—Ç–∞—Ç: —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç 6‚Äì10 –∞–±–∑–∞—Ü–µ–≤.\n\n"
            "–°—Ç–æ–∏–º–æ—Å—Ç—å: *220 ‚≠ê* (‚âà 500 ‚ÇΩ)."
        )
        await q.message.reply_photo(
            photo=IMG_NATAL,
            caption=caption_natal,
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("–û–ø–ª–∞—Ç–∏—Ç—å 220 ‚≠ê", callback_data="buy_natal")],
                [InlineKeyboardButton("‚Üê –ù–∞–∑–∞–¥", callback_data="back_home")],
            ]),
            parse_mode="Markdown",
        )
    elif q.data == "back_home":
        try:
            await q.message.delete()
        except Exception:
            pass
        intro = (
            "‚ú® –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ *AstroAi* ‚ú®\n\n"
            "–Ø ‚Äî —Ç–≤–æ–π –ø—Ä–æ–≤–æ–¥–Ω–∏–∫ –≤ –º–∏—Ä –∑–≤—ë–∑–¥, —á–∏—Å–µ–ª –∏ –ª–∏–Ω–∏–π —Å—É–¥—å–±—ã. –ó–¥–µ—Å—å –≤—Å—ë –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø—Ä–æ—Å—Ç–æ: –≤—ã–±–∏—Ä–∞–µ—à—å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ ‚Äî –∏ —è —Å–æ–±–∏—Ä–∞—é –¥–ª—è —Ç–µ–±—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —Ä–∞–∑–±–æ—Ä.\n\n"
            "–ß—Ç–æ –¥–æ—Å—Ç—É–ø–Ω–æ —Å–µ–π—á–∞—Å:\n"
            "‚Ä¢ üî¢ *–ù—É–º–µ—Ä–æ–ª–æ–≥–∏—è* ‚Äî –∫–æ–¥ —Ç–≤–æ–µ–π –ª–∏—á–Ω–æ—Å—Ç–∏ –∏ –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –ø–æ –¥–∞—Ç–µ –∏ –∏–º–µ–Ω–∏.\n"
            "‚Ä¢ ü™¨ *–•–∏—Ä–æ–º–∞–Ω—Ç–∏—è* ‚Äî —Ä–∞–∑–±–æ—Ä –ø–æ —Ñ–æ—Ç–æ –ª–∞–¥–æ–Ω–∏: —Ç–∞–ª–∞–Ω—Ç—ã, —Ä–∏—Å–∫–∏, –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ —Ü–∏–∫–ª—ã.\n"
            "‚Ä¢ üåå *–ù–∞—Ç–∞–ª–∫–∞ PRO* ‚Äî –ø–ª–∞–Ω–µ—Ç—ã, –¥–æ–º–∞, –∞—Å–ø–µ–∫—Ç—ã + –Ω—É–º–µ—Ä–æ–ª–æ–≥–∏—è –≤ –æ–¥–Ω–æ–º –ø–æ—Ä—Ç—Ä–µ—Ç–µ.\n\n"
            "–í—ã–±–µ—Ä–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∏–∂–µ ‚Äî —Ä–∞—Å—Å–∫–∞–∂—É –ø–æ–¥—Ä–æ–±–Ω–µ–µ –∏ –ø—Ä–µ–¥–ª–æ–∂—É –æ—Ñ–æ—Ä–º–∏—Ç—å –¥–æ—Å—Ç—É–ø."
        )
        await q.message.chat.send_message(
            intro,
            reply_markup=InlineKeyboardMarkup(MENU),
            parse_mode="Markdown",
        )
    elif q.data == "buy_num":
        await send_stars_invoice(
            q, context,
            "–ù—É–º–µ—Ä–æ–ª–æ–≥–∏—è",
            "–ö—Ä–∞—Ç–∫–∏–π –Ω—É–º–µ—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π —Ä–∞–∑–±–æ—Ä (‚âà 200 ‚ÇΩ).",
            "NUM_200", PRICE_NUM
        )
    elif q.data == "buy_palm":
        await send_stars_invoice(
            q, context,
            "–•–∏—Ä–æ–º–∞–Ω—Ç–∏—è",
            "–†–∞–∑–±–æ—Ä –ø–æ —Ñ–æ—Ç–æ –ª–∞–¥–æ–Ω–∏ (‚âà 300 ‚ÇΩ).",
            "PALM_300", PRICE_PALM
        )
    elif q.data == "buy_natal":
        await send_stars_invoice(
            q, context,
            "–ù–∞—Ç–∞–ª–∫–∞ PRO",
            "–ù–∞—Ç–∞–ª—å–Ω–∞—è –∫–∞—Ä—Ç–∞ + –¥–æ–º–∞ + –∞—Å–ø–µ–∫—Ç—ã + –Ω—É–º–µ—Ä–æ–ª–æ–≥–∏—è (‚âà 500 ‚ÇΩ).",
            "NATAL_500", PRICE_NATAL
        )
    else:
        await q.edit_message_text("–í—ã–±–∏—Ä–∞–π —É—Å–ª—É–≥—É ‚§¥Ô∏è")

# –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π pre-checkout (–∑–¥–µ—Å—å –º–æ–∂–Ω–æ –≤—Å—Ç–∞–≤–∏—Ç—å –≤–∞–ª–∏–¥–∞—Ü–∏–∏)
async def precheckout_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.pre_checkout_query.answer(ok=True)

# –£—Å–ø–µ—à–Ω–∞—è –æ–ø–ª–∞—Ç–∞
async def successful_payment_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    sp = update.message.successful_payment
    payload = sp.invoice_payload  # –Ω–∞–ø—Ä–∏–º–µ—Ä "NATAL_500"
    # TODO: –∑–¥–µ—Å—å –∑–∞–ø–∏—à–µ–º –∑–∞–∫–∞–∑ –≤ –ë–î (tg_id, payload, —Å—É–º–º–∞, charge_id)
    charge_id = sp.telegram_payment_charge_id
    log.info(f"Payment ok: payload={payload}, charge_id={charge_id}, amount={sp.total_amount} XTR")

    mapping = {
        "NUM_200":   "–û–ø–ª–∞—Ç–∞ –ø–æ–ª—É—á–µ–Ω–∞ ‚úÖ –ü—Ä–∏—à–ª–∏ –§–ò–û –∏ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ: 21.09.1999 –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤",
        "PALM_300":  "–û–ø–ª–∞—Ç–∞ –ø–æ–ª—É—á–µ–Ω–∞ ‚úÖ –ü—Ä–∏—à–ª–∏ —Ñ–æ—Ç–æ –ª–∞–¥–æ–Ω–∏ (–ø—Ä–∞–≤–æ–π —Ä—É–∫–∏) –ø—Ä–∏ —Ö–æ—Ä–æ—à–µ–º –æ—Å–≤–µ—â–µ–Ω–∏–∏.",
        "NATAL_500": "–û–ø–ª–∞—Ç–∞ –ø–æ–ª—É—á–µ–Ω–∞ ‚úÖ –ù–∞–ø–∏—à–∏: –¥–∞—Ç–∞, –≤—Ä–µ–º—è (–µ—Å–ª–∏ –∑–Ω–∞–µ—à—å) –∏ –≥–æ—Ä–æ–¥ —Ä–æ–∂–¥–µ–Ω–∏—è.",
    }
    await update.message.reply_text(mapping.get(payload, "–û–ø–ª–∞—Ç–∞ –ø–æ–ª—É—á–µ–Ω–∞ ‚úÖ"))

def main():
    if not BOT_TOKEN:
        raise RuntimeError("–ù–µ –Ω–∞–π–¥–µ–Ω BOT_TOKEN –≤ –æ–∫—Ä—É–∂–µ–Ω–∏–∏. –î–æ–±–∞–≤—å –µ–≥–æ –≤ .env –∏–ª–∏ Railway Variables.")

    app = Application.builder().token(BOT_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("menu", menu_cmd))
    app.add_handler(CallbackQueryHandler(on_menu))
    app.add_handler(PreCheckoutQueryHandler(precheckout_handler))
    app.add_handler(MessageHandler(filters.SUCCESSFUL_PAYMENT, successful_payment_handler))

    log.info("Bot is starting with long polling...")
    app.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == "__main__":
    main()